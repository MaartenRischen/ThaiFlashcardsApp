generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id            String    @id // Clerk ID
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  // User preferences
  defaultLanguage String  @default("en")
  preferredVoice  String?

  // Relations
  flashcardSets FlashcardSet[]
  progress      UserSetProgress[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model FlashcardSet {
  id               String   @id @default(cuid())
  userId           String
  name             String
  description      String?
  cleverTitle      String?
  level            String?
  goals            String[]
  specificTopics   String?
  source           String
  imageUrl         String?
  seriousnessLevel Int?
  toneLevel        Int?

  // Generation metadata
  llmBrand       String?
  llmModel       String?
  promptTemplate String?

  // Sharing
  shareId        String? @unique
  isPublished    Boolean @default(false)
  publishedSetId String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  phrases      Phrase[]
  progress     UserSetProgress[]
  publishedSet PublishedSet?     @relation(fields: [publishedSetId], references: [id])

  @@index([userId])
  @@index([shareId])
}

model Phrase {
  id            String  @id @default(cuid())
  setId         String
  english       String
  thai          String
  thaiMasculine String
  thaiFeminine  String
  pronunciation String
  mnemonic      String?
  examplesJson  Json?   @db.JsonB

  // New fields
  difficulty Int      @default(1)
  tags       String[]
  audioUrl   String?

  // Relations
  flashcardSet FlashcardSet @relation(fields: [setId], references: [id], onDelete: Cascade)

  @@index([setId])
}

model UserSetProgress {
  id             String   @id @default(cuid())
  userId         String
  setId          String
  progressData   Json     @db.JsonB
  lastAccessedAt DateTime @default(now())

  // New fields
  streak       Int @default(0)
  bestStreak   Int @default(0)
  totalReviews Int @default(0)

  // Relations
  user User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  set  FlashcardSet @relation(fields: [setId], references: [id], onDelete: Cascade)

  @@unique([userId, setId])
  @@index([userId])
  @@index([setId])
}

model PublishedSet {
  id               String  @id @default(cuid())
  title            String
  description      String?
  imageUrl         String?
  cardCount        Int
  author           String
  llmBrand         String?
  llmModel         String?
  seriousnessLevel Int?
  proficiencyLevel String?
  specificTopics   String?
  phrases          Json    @db.JsonB

  // New fields
  rating      Float    @default(0)
  ratingCount Int      @default(0)
  downloads   Int      @default(0)
  tags        String[]

  // Relations
  flashcardSets FlashcardSet[]

  // Timestamps
  publishedAt DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([publishedAt])
  @@index([rating])
  @@index([downloads])
}
