// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // Connection pooled URL for queries
  directUrl = env("DIRECT_DATABASE_URL") // Direct connection URL for migrations
}

// -------------------------------------
// NextAuth.js Models (Required for Prisma Adapter)
// -------------------------------------

// model Account {
//   id                String  @id @default(cuid())
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String? @db.Text
//   access_token      String? @db.Text
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String? @db.Text
//   session_state     String?
//
//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
//
//   @@unique([provider, providerAccountId])
// }
//
// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

model User {
  id            String    @id // Use Clerk ID as primary key (already String)
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  // REMOVED: password      String? // Clerk handles passwords
  // REMOVED: supabaseAuthUserId String? @unique // No longer needed if Clerk is primary
  // REMOVED: accounts      Account[] // Assumes Clerk handles external accounts
  // REMOVED: sessions      Session[] // Clerk handles sessions

  // Application-specific relations
  flashcardSets   FlashcardSet[]
  userSetProgress UserSetProgress[]
}

// REMOVED: VerificationToken, Session, Account models (Assuming Clerk handles these)

// -------------------------------------
// Application-Specific Models
// -------------------------------------

model FlashcardSet {
  id             String   @id @default(cuid()) // Keep internal CUID for set ID
  userId         String   // Foreign key referencing User.id (Clerk User ID)
  name           String   
  cleverTitle    String?  
  level          String?  
  goals          String[] 
  specificTopics String?
  source         String   
  imageUrl       String?  
  seriousnessLevel Int?   
  llmBrand       String?  
  llmModel       String?  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  shareId        String?  @unique 

  // Corrected Relation: References User.id (Clerk User ID)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  phrases Phrase[] 
  progress UserSetProgress[] 

  @@index([userId])
}

model Phrase {
  id              String   @id @default(cuid())
  setId           String   // Foreign key to FlashcardSet
  english         String
  thai            String
  thaiMasculine   String
  thaiFeminine    String
  pronunciation   String
  mnemonic        String?
  // Example sentences could be JSON or a separate related table if needed often
  examplesJson    Json?    @db.JsonB // Store examples array as JSON

  flashcardSet FlashcardSet @relation(fields: [setId], references: [id], onDelete: Cascade)

  @@index([setId])
}

// Stores user-specific progress for a particular set
model UserSetProgress {
  id             String   @id @default(cuid()) // Keep internal CUID for progress ID
  userId         String   // Foreign key referencing User.id (Clerk User ID)
  setId          String   
  progressData   Json     @db.JsonB 
  lastAccessedAt DateTime @default(now()) @updatedAt

  // Corrected Relation: References User.id (Clerk User ID)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  set  FlashcardSet @relation(fields: [setId], references: [id], onDelete: Cascade)

  @@unique([userId, setId]) 
  @@index([userId])
  @@index([setId])
}

// -------------------------------------
// Gallery Model
// -------------------------------------

model PublishedSet {
  id             String   @id @default(cuid())
  title          String   // Use title for public display
  description    String?
  imageUrl       String?
  cardCount      Int
  author         String   // Store author name (e.g., user's name or "Anonymous")
  llmBrand       String?
  llmModel       String?
  seriousnessLevel Int?
  specificTopics String?
  phrases        Json     @db.JsonB // Store the Phrase[] array directly as JSONB
  publishedAt    DateTime @default(now())

  // Optional: Link back to the original set/user if needed for reference, but keep data separate
  // originalSetId String?
  // originalUserId String?

  @@index([publishedAt])
}
