// ... (previous imports and code) ...

                {/* Word Breakdown Section with scroll indicator */}
                {phrases[index] && (
                  <div className="mt-4 relative">
                    {/* Scroll indicator */}
                    <div className="absolute -top-16 left-1/2 transform -translate-x-1/2 flex flex-col items-center animate-bounce">
                      <div className="text-gray-400 text-sm mb-1">Scroll for more</div>
                      <ChevronDown className="w-4 h-4 text-gray-400" />
                    </div>
                    <button
                      onClick={(e) => {
                        e.preventDefault();
                        if (!showBreakdown && !wordBreakdowns[`${getThaiWithGender(phrases[index], isMale, isPoliteMode)}_${getGenderedPronunciation(phrases[index], isMale, isPoliteMode)}`]) {
                          fetchWordBreakdown(phrases[index]);
                        }
                        setShowBreakdown(!showBreakdown);
                      }}
                      className="w-full neumorphic-button text-blue-400 flex items-center justify-center gap-2 py-2 relative animate-pulse hover:animate-none"
                    >
                      {showBreakdown ? <ChevronUp className="w-4 h-4" /> : <ChevronDown className="w-4 h-4" />}
                      Breaking It Down / Literal Translation
                    </button>
                    
                    <div 
                      className={`mt-3 p-4 rounded-lg bg-[#1a1a1a] border border-[#2a2a2a] transition-all duration-300 ${
                        showBreakdown ? 'opacity-100 max-h-[1000px]' : 'opacity-0 max-h-0 overflow-hidden'
                      }`}
                    >
                      {loadingBreakdown ? (
                        <div className="text-center text-gray-400">Loading breakdown...</div>
                      ) : (() => {
                        const thai = getThaiWithGender(phrases[index], isMale, isPoliteMode);
                        const pronunciation = getGenderedPronunciation(phrases[index], isMale, isPoliteMode);
                        const cacheKey = `${thai}_${pronunciation}`;
                        const breakdown = wordBreakdowns[cacheKey];
                        
                        if (!breakdown) {
                          // Still show literal translation even if no breakdown is available
                          if ((phrases[index] as any).literal) {
                            return (
                              <div className="mb-3 p-3 bg-[#0f0f0f] rounded-lg border border-[#333]">
                                <h4 className="text-sm text-gray-400 mb-1">Literal Translation:</h4>
                                <p className="text-white font-medium">{(phrases[index] as any).literal}</p>
                              </div>
                            );
                          }
                          return <div className="text-center text-gray-400">No breakdown available</div>;
                        }
                        
                        return (
                          <div className="space-y-3">
                            {/* Literal Translation */}
                            {(phrases[index] as any).literal && (
                              <div className="mb-3 p-3 bg-[#0f0f0f] rounded-lg border border-[#333]">
                                <h4 className="text-sm text-gray-400 mb-1">Literal Translation:</h4>
                                <p className="text-white font-medium">{(phrases[index] as any).literal}</p>
                              </div>
                            )}
                            
                            {/* Individual Words */}
                            <div className="space-y-2">
                              {breakdown.words.map((word, idx) => (
                                <div key={idx} className="flex items-baseline gap-2">
                                  <span className="text-white font-medium">{word.thai}</span>
                                  <span className="text-gray-400 text-sm">({word.pronunciation})</span>
                                  <span className="text-blue-300 text-sm flex-1">= {word.english}</span>
                                </div>
                              ))}
                            </div>
                            
                            {/* Compound Meanings */}
                            {breakdown.compounds && breakdown.compounds.length > 0 && (
                              <>
                                <div className="border-t border-[#333] pt-3">
                                  <h4 className="text-sm text-gray-400 mb-2">Compound meanings:</h4>
                                  <div className="space-y-2">
                                    {breakdown.compounds.map((compound, idx) => (
                                      <div key={idx} className="flex items-baseline gap-2">
                                        <span className="text-white font-medium">{compound.thai}</span>
                                        <span className="text-gray-400 text-sm">({compound.pronunciation})</span>
                                        <span className="text-green-300 text-sm flex-1">= {compound.english}</span>
                                      </div>
                                    ))}
                                  </div>
                                </div>
                              </>
                            )}
                          </div>
                        );
                      })()}
                    </div>
                  </div>
                )}

// ... (rest of the file) ...
