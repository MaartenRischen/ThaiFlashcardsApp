
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model FlashcardSet
 * 
 */
export type FlashcardSet = $Result.DefaultSelection<Prisma.$FlashcardSetPayload>
/**
 * Model Phrase
 * 
 */
export type Phrase = $Result.DefaultSelection<Prisma.$PhrasePayload>
/**
 * Model UserSetProgress
 * 
 */
export type UserSetProgress = $Result.DefaultSelection<Prisma.$UserSetProgressPayload>
/**
 * Model PublishedSet
 * 
 */
export type PublishedSet = $Result.DefaultSelection<Prisma.$PublishedSetPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.flashcardSet`: Exposes CRUD operations for the **FlashcardSet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FlashcardSets
    * const flashcardSets = await prisma.flashcardSet.findMany()
    * ```
    */
  get flashcardSet(): Prisma.FlashcardSetDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.phrase`: Exposes CRUD operations for the **Phrase** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Phrases
    * const phrases = await prisma.phrase.findMany()
    * ```
    */
  get phrase(): Prisma.PhraseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userSetProgress`: Exposes CRUD operations for the **UserSetProgress** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserSetProgresses
    * const userSetProgresses = await prisma.userSetProgress.findMany()
    * ```
    */
  get userSetProgress(): Prisma.UserSetProgressDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.publishedSet`: Exposes CRUD operations for the **PublishedSet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PublishedSets
    * const publishedSets = await prisma.publishedSet.findMany()
    * ```
    */
  get publishedSet(): Prisma.PublishedSetDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.11.1
   * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    FlashcardSet: 'FlashcardSet',
    Phrase: 'Phrase',
    UserSetProgress: 'UserSetProgress',
    PublishedSet: 'PublishedSet'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "flashcardSet" | "phrase" | "userSetProgress" | "publishedSet"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      FlashcardSet: {
        payload: Prisma.$FlashcardSetPayload<ExtArgs>
        fields: Prisma.FlashcardSetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FlashcardSetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlashcardSetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FlashcardSetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlashcardSetPayload>
          }
          findFirst: {
            args: Prisma.FlashcardSetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlashcardSetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FlashcardSetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlashcardSetPayload>
          }
          findMany: {
            args: Prisma.FlashcardSetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlashcardSetPayload>[]
          }
          create: {
            args: Prisma.FlashcardSetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlashcardSetPayload>
          }
          createMany: {
            args: Prisma.FlashcardSetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FlashcardSetCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlashcardSetPayload>[]
          }
          delete: {
            args: Prisma.FlashcardSetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlashcardSetPayload>
          }
          update: {
            args: Prisma.FlashcardSetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlashcardSetPayload>
          }
          deleteMany: {
            args: Prisma.FlashcardSetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FlashcardSetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FlashcardSetUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlashcardSetPayload>[]
          }
          upsert: {
            args: Prisma.FlashcardSetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlashcardSetPayload>
          }
          aggregate: {
            args: Prisma.FlashcardSetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFlashcardSet>
          }
          groupBy: {
            args: Prisma.FlashcardSetGroupByArgs<ExtArgs>
            result: $Utils.Optional<FlashcardSetGroupByOutputType>[]
          }
          count: {
            args: Prisma.FlashcardSetCountArgs<ExtArgs>
            result: $Utils.Optional<FlashcardSetCountAggregateOutputType> | number
          }
        }
      }
      Phrase: {
        payload: Prisma.$PhrasePayload<ExtArgs>
        fields: Prisma.PhraseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PhraseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhrasePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PhraseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhrasePayload>
          }
          findFirst: {
            args: Prisma.PhraseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhrasePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PhraseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhrasePayload>
          }
          findMany: {
            args: Prisma.PhraseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhrasePayload>[]
          }
          create: {
            args: Prisma.PhraseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhrasePayload>
          }
          createMany: {
            args: Prisma.PhraseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PhraseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhrasePayload>[]
          }
          delete: {
            args: Prisma.PhraseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhrasePayload>
          }
          update: {
            args: Prisma.PhraseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhrasePayload>
          }
          deleteMany: {
            args: Prisma.PhraseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PhraseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PhraseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhrasePayload>[]
          }
          upsert: {
            args: Prisma.PhraseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhrasePayload>
          }
          aggregate: {
            args: Prisma.PhraseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePhrase>
          }
          groupBy: {
            args: Prisma.PhraseGroupByArgs<ExtArgs>
            result: $Utils.Optional<PhraseGroupByOutputType>[]
          }
          count: {
            args: Prisma.PhraseCountArgs<ExtArgs>
            result: $Utils.Optional<PhraseCountAggregateOutputType> | number
          }
        }
      }
      UserSetProgress: {
        payload: Prisma.$UserSetProgressPayload<ExtArgs>
        fields: Prisma.UserSetProgressFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserSetProgressFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSetProgressPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserSetProgressFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSetProgressPayload>
          }
          findFirst: {
            args: Prisma.UserSetProgressFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSetProgressPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserSetProgressFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSetProgressPayload>
          }
          findMany: {
            args: Prisma.UserSetProgressFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSetProgressPayload>[]
          }
          create: {
            args: Prisma.UserSetProgressCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSetProgressPayload>
          }
          createMany: {
            args: Prisma.UserSetProgressCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserSetProgressCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSetProgressPayload>[]
          }
          delete: {
            args: Prisma.UserSetProgressDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSetProgressPayload>
          }
          update: {
            args: Prisma.UserSetProgressUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSetProgressPayload>
          }
          deleteMany: {
            args: Prisma.UserSetProgressDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserSetProgressUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserSetProgressUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSetProgressPayload>[]
          }
          upsert: {
            args: Prisma.UserSetProgressUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSetProgressPayload>
          }
          aggregate: {
            args: Prisma.UserSetProgressAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserSetProgress>
          }
          groupBy: {
            args: Prisma.UserSetProgressGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserSetProgressGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserSetProgressCountArgs<ExtArgs>
            result: $Utils.Optional<UserSetProgressCountAggregateOutputType> | number
          }
        }
      }
      PublishedSet: {
        payload: Prisma.$PublishedSetPayload<ExtArgs>
        fields: Prisma.PublishedSetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PublishedSetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublishedSetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PublishedSetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublishedSetPayload>
          }
          findFirst: {
            args: Prisma.PublishedSetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublishedSetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PublishedSetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublishedSetPayload>
          }
          findMany: {
            args: Prisma.PublishedSetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublishedSetPayload>[]
          }
          create: {
            args: Prisma.PublishedSetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublishedSetPayload>
          }
          createMany: {
            args: Prisma.PublishedSetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PublishedSetCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublishedSetPayload>[]
          }
          delete: {
            args: Prisma.PublishedSetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublishedSetPayload>
          }
          update: {
            args: Prisma.PublishedSetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublishedSetPayload>
          }
          deleteMany: {
            args: Prisma.PublishedSetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PublishedSetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PublishedSetUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublishedSetPayload>[]
          }
          upsert: {
            args: Prisma.PublishedSetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublishedSetPayload>
          }
          aggregate: {
            args: Prisma.PublishedSetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePublishedSet>
          }
          groupBy: {
            args: Prisma.PublishedSetGroupByArgs<ExtArgs>
            result: $Utils.Optional<PublishedSetGroupByOutputType>[]
          }
          count: {
            args: Prisma.PublishedSetCountArgs<ExtArgs>
            result: $Utils.Optional<PublishedSetCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    flashcardSet?: FlashcardSetOmit
    phrase?: PhraseOmit
    userSetProgress?: UserSetProgressOmit
    publishedSet?: PublishedSetOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    flashcardSets: number
    progress: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    flashcardSets?: boolean | UserCountOutputTypeCountFlashcardSetsArgs
    progress?: boolean | UserCountOutputTypeCountProgressArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFlashcardSetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FlashcardSetWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProgressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSetProgressWhereInput
  }


  /**
   * Count Type FlashcardSetCountOutputType
   */

  export type FlashcardSetCountOutputType = {
    phrases: number
    progress: number
  }

  export type FlashcardSetCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    phrases?: boolean | FlashcardSetCountOutputTypeCountPhrasesArgs
    progress?: boolean | FlashcardSetCountOutputTypeCountProgressArgs
  }

  // Custom InputTypes
  /**
   * FlashcardSetCountOutputType without action
   */
  export type FlashcardSetCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlashcardSetCountOutputType
     */
    select?: FlashcardSetCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FlashcardSetCountOutputType without action
   */
  export type FlashcardSetCountOutputTypeCountPhrasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PhraseWhereInput
  }

  /**
   * FlashcardSetCountOutputType without action
   */
  export type FlashcardSetCountOutputTypeCountProgressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSetProgressWhereInput
  }


  /**
   * Count Type PublishedSetCountOutputType
   */

  export type PublishedSetCountOutputType = {
    flashcardSets: number
  }

  export type PublishedSetCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    flashcardSets?: boolean | PublishedSetCountOutputTypeCountFlashcardSetsArgs
  }

  // Custom InputTypes
  /**
   * PublishedSetCountOutputType without action
   */
  export type PublishedSetCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublishedSetCountOutputType
     */
    select?: PublishedSetCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PublishedSetCountOutputType without action
   */
  export type PublishedSetCountOutputTypeCountFlashcardSetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FlashcardSetWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    defaultLanguage: string | null
    preferredVoice: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    defaultLanguage: string | null
    preferredVoice: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    emailVerified: number
    image: number
    defaultLanguage: number
    preferredVoice: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    defaultLanguage?: true
    preferredVoice?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    defaultLanguage?: true
    preferredVoice?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    defaultLanguage?: true
    preferredVoice?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    defaultLanguage: string
    preferredVoice: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    defaultLanguage?: boolean
    preferredVoice?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    flashcardSets?: boolean | User$flashcardSetsArgs<ExtArgs>
    progress?: boolean | User$progressArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    defaultLanguage?: boolean
    preferredVoice?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    defaultLanguage?: boolean
    preferredVoice?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    defaultLanguage?: boolean
    preferredVoice?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "emailVerified" | "image" | "defaultLanguage" | "preferredVoice" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    flashcardSets?: boolean | User$flashcardSetsArgs<ExtArgs>
    progress?: boolean | User$progressArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      flashcardSets: Prisma.$FlashcardSetPayload<ExtArgs>[]
      progress: Prisma.$UserSetProgressPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string | null
      email: string | null
      emailVerified: Date | null
      image: string | null
      defaultLanguage: string
      preferredVoice: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    flashcardSets<T extends User$flashcardSetsArgs<ExtArgs> = {}>(args?: Subset<T, User$flashcardSetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlashcardSetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    progress<T extends User$progressArgs<ExtArgs> = {}>(args?: Subset<T, User$progressArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSetProgressPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly emailVerified: FieldRef<"User", 'DateTime'>
    readonly image: FieldRef<"User", 'String'>
    readonly defaultLanguage: FieldRef<"User", 'String'>
    readonly preferredVoice: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.flashcardSets
   */
  export type User$flashcardSetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlashcardSet
     */
    select?: FlashcardSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlashcardSet
     */
    omit?: FlashcardSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlashcardSetInclude<ExtArgs> | null
    where?: FlashcardSetWhereInput
    orderBy?: FlashcardSetOrderByWithRelationInput | FlashcardSetOrderByWithRelationInput[]
    cursor?: FlashcardSetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FlashcardSetScalarFieldEnum | FlashcardSetScalarFieldEnum[]
  }

  /**
   * User.progress
   */
  export type User$progressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSetProgress
     */
    select?: UserSetProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSetProgress
     */
    omit?: UserSetProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSetProgressInclude<ExtArgs> | null
    where?: UserSetProgressWhereInput
    orderBy?: UserSetProgressOrderByWithRelationInput | UserSetProgressOrderByWithRelationInput[]
    cursor?: UserSetProgressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserSetProgressScalarFieldEnum | UserSetProgressScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model FlashcardSet
   */

  export type AggregateFlashcardSet = {
    _count: FlashcardSetCountAggregateOutputType | null
    _avg: FlashcardSetAvgAggregateOutputType | null
    _sum: FlashcardSetSumAggregateOutputType | null
    _min: FlashcardSetMinAggregateOutputType | null
    _max: FlashcardSetMaxAggregateOutputType | null
  }

  export type FlashcardSetAvgAggregateOutputType = {
    seriousnessLevel: number | null
    toneLevel: number | null
  }

  export type FlashcardSetSumAggregateOutputType = {
    seriousnessLevel: number | null
    toneLevel: number | null
  }

  export type FlashcardSetMinAggregateOutputType = {
    id: string | null
    userId: string | null
    name: string | null
    description: string | null
    cleverTitle: string | null
    level: string | null
    specificTopics: string | null
    source: string | null
    imageUrl: string | null
    seriousnessLevel: number | null
    toneLevel: number | null
    llmBrand: string | null
    llmModel: string | null
    promptTemplate: string | null
    shareId: string | null
    isPublished: boolean | null
    publishedSetId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FlashcardSetMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    name: string | null
    description: string | null
    cleverTitle: string | null
    level: string | null
    specificTopics: string | null
    source: string | null
    imageUrl: string | null
    seriousnessLevel: number | null
    toneLevel: number | null
    llmBrand: string | null
    llmModel: string | null
    promptTemplate: string | null
    shareId: string | null
    isPublished: boolean | null
    publishedSetId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FlashcardSetCountAggregateOutputType = {
    id: number
    userId: number
    name: number
    description: number
    cleverTitle: number
    level: number
    goals: number
    specificTopics: number
    source: number
    imageUrl: number
    seriousnessLevel: number
    toneLevel: number
    llmBrand: number
    llmModel: number
    promptTemplate: number
    shareId: number
    isPublished: number
    publishedSetId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FlashcardSetAvgAggregateInputType = {
    seriousnessLevel?: true
    toneLevel?: true
  }

  export type FlashcardSetSumAggregateInputType = {
    seriousnessLevel?: true
    toneLevel?: true
  }

  export type FlashcardSetMinAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    description?: true
    cleverTitle?: true
    level?: true
    specificTopics?: true
    source?: true
    imageUrl?: true
    seriousnessLevel?: true
    toneLevel?: true
    llmBrand?: true
    llmModel?: true
    promptTemplate?: true
    shareId?: true
    isPublished?: true
    publishedSetId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FlashcardSetMaxAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    description?: true
    cleverTitle?: true
    level?: true
    specificTopics?: true
    source?: true
    imageUrl?: true
    seriousnessLevel?: true
    toneLevel?: true
    llmBrand?: true
    llmModel?: true
    promptTemplate?: true
    shareId?: true
    isPublished?: true
    publishedSetId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FlashcardSetCountAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    description?: true
    cleverTitle?: true
    level?: true
    goals?: true
    specificTopics?: true
    source?: true
    imageUrl?: true
    seriousnessLevel?: true
    toneLevel?: true
    llmBrand?: true
    llmModel?: true
    promptTemplate?: true
    shareId?: true
    isPublished?: true
    publishedSetId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FlashcardSetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FlashcardSet to aggregate.
     */
    where?: FlashcardSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FlashcardSets to fetch.
     */
    orderBy?: FlashcardSetOrderByWithRelationInput | FlashcardSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FlashcardSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FlashcardSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FlashcardSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FlashcardSets
    **/
    _count?: true | FlashcardSetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FlashcardSetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FlashcardSetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FlashcardSetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FlashcardSetMaxAggregateInputType
  }

  export type GetFlashcardSetAggregateType<T extends FlashcardSetAggregateArgs> = {
        [P in keyof T & keyof AggregateFlashcardSet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFlashcardSet[P]>
      : GetScalarType<T[P], AggregateFlashcardSet[P]>
  }




  export type FlashcardSetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FlashcardSetWhereInput
    orderBy?: FlashcardSetOrderByWithAggregationInput | FlashcardSetOrderByWithAggregationInput[]
    by: FlashcardSetScalarFieldEnum[] | FlashcardSetScalarFieldEnum
    having?: FlashcardSetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FlashcardSetCountAggregateInputType | true
    _avg?: FlashcardSetAvgAggregateInputType
    _sum?: FlashcardSetSumAggregateInputType
    _min?: FlashcardSetMinAggregateInputType
    _max?: FlashcardSetMaxAggregateInputType
  }

  export type FlashcardSetGroupByOutputType = {
    id: string
    userId: string
    name: string
    description: string | null
    cleverTitle: string | null
    level: string | null
    goals: string[]
    specificTopics: string | null
    source: string
    imageUrl: string | null
    seriousnessLevel: number | null
    toneLevel: number | null
    llmBrand: string | null
    llmModel: string | null
    promptTemplate: string | null
    shareId: string | null
    isPublished: boolean
    publishedSetId: string | null
    createdAt: Date
    updatedAt: Date
    _count: FlashcardSetCountAggregateOutputType | null
    _avg: FlashcardSetAvgAggregateOutputType | null
    _sum: FlashcardSetSumAggregateOutputType | null
    _min: FlashcardSetMinAggregateOutputType | null
    _max: FlashcardSetMaxAggregateOutputType | null
  }

  type GetFlashcardSetGroupByPayload<T extends FlashcardSetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FlashcardSetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FlashcardSetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FlashcardSetGroupByOutputType[P]>
            : GetScalarType<T[P], FlashcardSetGroupByOutputType[P]>
        }
      >
    >


  export type FlashcardSetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    description?: boolean
    cleverTitle?: boolean
    level?: boolean
    goals?: boolean
    specificTopics?: boolean
    source?: boolean
    imageUrl?: boolean
    seriousnessLevel?: boolean
    toneLevel?: boolean
    llmBrand?: boolean
    llmModel?: boolean
    promptTemplate?: boolean
    shareId?: boolean
    isPublished?: boolean
    publishedSetId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    phrases?: boolean | FlashcardSet$phrasesArgs<ExtArgs>
    progress?: boolean | FlashcardSet$progressArgs<ExtArgs>
    publishedSet?: boolean | FlashcardSet$publishedSetArgs<ExtArgs>
    _count?: boolean | FlashcardSetCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["flashcardSet"]>

  export type FlashcardSetSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    description?: boolean
    cleverTitle?: boolean
    level?: boolean
    goals?: boolean
    specificTopics?: boolean
    source?: boolean
    imageUrl?: boolean
    seriousnessLevel?: boolean
    toneLevel?: boolean
    llmBrand?: boolean
    llmModel?: boolean
    promptTemplate?: boolean
    shareId?: boolean
    isPublished?: boolean
    publishedSetId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    publishedSet?: boolean | FlashcardSet$publishedSetArgs<ExtArgs>
  }, ExtArgs["result"]["flashcardSet"]>

  export type FlashcardSetSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    description?: boolean
    cleverTitle?: boolean
    level?: boolean
    goals?: boolean
    specificTopics?: boolean
    source?: boolean
    imageUrl?: boolean
    seriousnessLevel?: boolean
    toneLevel?: boolean
    llmBrand?: boolean
    llmModel?: boolean
    promptTemplate?: boolean
    shareId?: boolean
    isPublished?: boolean
    publishedSetId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    publishedSet?: boolean | FlashcardSet$publishedSetArgs<ExtArgs>
  }, ExtArgs["result"]["flashcardSet"]>

  export type FlashcardSetSelectScalar = {
    id?: boolean
    userId?: boolean
    name?: boolean
    description?: boolean
    cleverTitle?: boolean
    level?: boolean
    goals?: boolean
    specificTopics?: boolean
    source?: boolean
    imageUrl?: boolean
    seriousnessLevel?: boolean
    toneLevel?: boolean
    llmBrand?: boolean
    llmModel?: boolean
    promptTemplate?: boolean
    shareId?: boolean
    isPublished?: boolean
    publishedSetId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FlashcardSetOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "name" | "description" | "cleverTitle" | "level" | "goals" | "specificTopics" | "source" | "imageUrl" | "seriousnessLevel" | "toneLevel" | "llmBrand" | "llmModel" | "promptTemplate" | "shareId" | "isPublished" | "publishedSetId" | "createdAt" | "updatedAt", ExtArgs["result"]["flashcardSet"]>
  export type FlashcardSetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    phrases?: boolean | FlashcardSet$phrasesArgs<ExtArgs>
    progress?: boolean | FlashcardSet$progressArgs<ExtArgs>
    publishedSet?: boolean | FlashcardSet$publishedSetArgs<ExtArgs>
    _count?: boolean | FlashcardSetCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FlashcardSetIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    publishedSet?: boolean | FlashcardSet$publishedSetArgs<ExtArgs>
  }
  export type FlashcardSetIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    publishedSet?: boolean | FlashcardSet$publishedSetArgs<ExtArgs>
  }

  export type $FlashcardSetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FlashcardSet"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      phrases: Prisma.$PhrasePayload<ExtArgs>[]
      progress: Prisma.$UserSetProgressPayload<ExtArgs>[]
      publishedSet: Prisma.$PublishedSetPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      name: string
      description: string | null
      cleverTitle: string | null
      level: string | null
      goals: string[]
      specificTopics: string | null
      source: string
      imageUrl: string | null
      seriousnessLevel: number | null
      toneLevel: number | null
      llmBrand: string | null
      llmModel: string | null
      promptTemplate: string | null
      shareId: string | null
      isPublished: boolean
      publishedSetId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["flashcardSet"]>
    composites: {}
  }

  type FlashcardSetGetPayload<S extends boolean | null | undefined | FlashcardSetDefaultArgs> = $Result.GetResult<Prisma.$FlashcardSetPayload, S>

  type FlashcardSetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FlashcardSetFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FlashcardSetCountAggregateInputType | true
    }

  export interface FlashcardSetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FlashcardSet'], meta: { name: 'FlashcardSet' } }
    /**
     * Find zero or one FlashcardSet that matches the filter.
     * @param {FlashcardSetFindUniqueArgs} args - Arguments to find a FlashcardSet
     * @example
     * // Get one FlashcardSet
     * const flashcardSet = await prisma.flashcardSet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FlashcardSetFindUniqueArgs>(args: SelectSubset<T, FlashcardSetFindUniqueArgs<ExtArgs>>): Prisma__FlashcardSetClient<$Result.GetResult<Prisma.$FlashcardSetPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FlashcardSet that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FlashcardSetFindUniqueOrThrowArgs} args - Arguments to find a FlashcardSet
     * @example
     * // Get one FlashcardSet
     * const flashcardSet = await prisma.flashcardSet.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FlashcardSetFindUniqueOrThrowArgs>(args: SelectSubset<T, FlashcardSetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FlashcardSetClient<$Result.GetResult<Prisma.$FlashcardSetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FlashcardSet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlashcardSetFindFirstArgs} args - Arguments to find a FlashcardSet
     * @example
     * // Get one FlashcardSet
     * const flashcardSet = await prisma.flashcardSet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FlashcardSetFindFirstArgs>(args?: SelectSubset<T, FlashcardSetFindFirstArgs<ExtArgs>>): Prisma__FlashcardSetClient<$Result.GetResult<Prisma.$FlashcardSetPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FlashcardSet that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlashcardSetFindFirstOrThrowArgs} args - Arguments to find a FlashcardSet
     * @example
     * // Get one FlashcardSet
     * const flashcardSet = await prisma.flashcardSet.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FlashcardSetFindFirstOrThrowArgs>(args?: SelectSubset<T, FlashcardSetFindFirstOrThrowArgs<ExtArgs>>): Prisma__FlashcardSetClient<$Result.GetResult<Prisma.$FlashcardSetPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FlashcardSets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlashcardSetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FlashcardSets
     * const flashcardSets = await prisma.flashcardSet.findMany()
     * 
     * // Get first 10 FlashcardSets
     * const flashcardSets = await prisma.flashcardSet.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const flashcardSetWithIdOnly = await prisma.flashcardSet.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FlashcardSetFindManyArgs>(args?: SelectSubset<T, FlashcardSetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlashcardSetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FlashcardSet.
     * @param {FlashcardSetCreateArgs} args - Arguments to create a FlashcardSet.
     * @example
     * // Create one FlashcardSet
     * const FlashcardSet = await prisma.flashcardSet.create({
     *   data: {
     *     // ... data to create a FlashcardSet
     *   }
     * })
     * 
     */
    create<T extends FlashcardSetCreateArgs>(args: SelectSubset<T, FlashcardSetCreateArgs<ExtArgs>>): Prisma__FlashcardSetClient<$Result.GetResult<Prisma.$FlashcardSetPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FlashcardSets.
     * @param {FlashcardSetCreateManyArgs} args - Arguments to create many FlashcardSets.
     * @example
     * // Create many FlashcardSets
     * const flashcardSet = await prisma.flashcardSet.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FlashcardSetCreateManyArgs>(args?: SelectSubset<T, FlashcardSetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FlashcardSets and returns the data saved in the database.
     * @param {FlashcardSetCreateManyAndReturnArgs} args - Arguments to create many FlashcardSets.
     * @example
     * // Create many FlashcardSets
     * const flashcardSet = await prisma.flashcardSet.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FlashcardSets and only return the `id`
     * const flashcardSetWithIdOnly = await prisma.flashcardSet.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FlashcardSetCreateManyAndReturnArgs>(args?: SelectSubset<T, FlashcardSetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlashcardSetPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FlashcardSet.
     * @param {FlashcardSetDeleteArgs} args - Arguments to delete one FlashcardSet.
     * @example
     * // Delete one FlashcardSet
     * const FlashcardSet = await prisma.flashcardSet.delete({
     *   where: {
     *     // ... filter to delete one FlashcardSet
     *   }
     * })
     * 
     */
    delete<T extends FlashcardSetDeleteArgs>(args: SelectSubset<T, FlashcardSetDeleteArgs<ExtArgs>>): Prisma__FlashcardSetClient<$Result.GetResult<Prisma.$FlashcardSetPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FlashcardSet.
     * @param {FlashcardSetUpdateArgs} args - Arguments to update one FlashcardSet.
     * @example
     * // Update one FlashcardSet
     * const flashcardSet = await prisma.flashcardSet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FlashcardSetUpdateArgs>(args: SelectSubset<T, FlashcardSetUpdateArgs<ExtArgs>>): Prisma__FlashcardSetClient<$Result.GetResult<Prisma.$FlashcardSetPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FlashcardSets.
     * @param {FlashcardSetDeleteManyArgs} args - Arguments to filter FlashcardSets to delete.
     * @example
     * // Delete a few FlashcardSets
     * const { count } = await prisma.flashcardSet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FlashcardSetDeleteManyArgs>(args?: SelectSubset<T, FlashcardSetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FlashcardSets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlashcardSetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FlashcardSets
     * const flashcardSet = await prisma.flashcardSet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FlashcardSetUpdateManyArgs>(args: SelectSubset<T, FlashcardSetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FlashcardSets and returns the data updated in the database.
     * @param {FlashcardSetUpdateManyAndReturnArgs} args - Arguments to update many FlashcardSets.
     * @example
     * // Update many FlashcardSets
     * const flashcardSet = await prisma.flashcardSet.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FlashcardSets and only return the `id`
     * const flashcardSetWithIdOnly = await prisma.flashcardSet.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FlashcardSetUpdateManyAndReturnArgs>(args: SelectSubset<T, FlashcardSetUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlashcardSetPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FlashcardSet.
     * @param {FlashcardSetUpsertArgs} args - Arguments to update or create a FlashcardSet.
     * @example
     * // Update or create a FlashcardSet
     * const flashcardSet = await prisma.flashcardSet.upsert({
     *   create: {
     *     // ... data to create a FlashcardSet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FlashcardSet we want to update
     *   }
     * })
     */
    upsert<T extends FlashcardSetUpsertArgs>(args: SelectSubset<T, FlashcardSetUpsertArgs<ExtArgs>>): Prisma__FlashcardSetClient<$Result.GetResult<Prisma.$FlashcardSetPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FlashcardSets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlashcardSetCountArgs} args - Arguments to filter FlashcardSets to count.
     * @example
     * // Count the number of FlashcardSets
     * const count = await prisma.flashcardSet.count({
     *   where: {
     *     // ... the filter for the FlashcardSets we want to count
     *   }
     * })
    **/
    count<T extends FlashcardSetCountArgs>(
      args?: Subset<T, FlashcardSetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FlashcardSetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FlashcardSet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlashcardSetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FlashcardSetAggregateArgs>(args: Subset<T, FlashcardSetAggregateArgs>): Prisma.PrismaPromise<GetFlashcardSetAggregateType<T>>

    /**
     * Group by FlashcardSet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlashcardSetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FlashcardSetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FlashcardSetGroupByArgs['orderBy'] }
        : { orderBy?: FlashcardSetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FlashcardSetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFlashcardSetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FlashcardSet model
   */
  readonly fields: FlashcardSetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FlashcardSet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FlashcardSetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    phrases<T extends FlashcardSet$phrasesArgs<ExtArgs> = {}>(args?: Subset<T, FlashcardSet$phrasesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PhrasePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    progress<T extends FlashcardSet$progressArgs<ExtArgs> = {}>(args?: Subset<T, FlashcardSet$progressArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSetProgressPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    publishedSet<T extends FlashcardSet$publishedSetArgs<ExtArgs> = {}>(args?: Subset<T, FlashcardSet$publishedSetArgs<ExtArgs>>): Prisma__PublishedSetClient<$Result.GetResult<Prisma.$PublishedSetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FlashcardSet model
   */
  interface FlashcardSetFieldRefs {
    readonly id: FieldRef<"FlashcardSet", 'String'>
    readonly userId: FieldRef<"FlashcardSet", 'String'>
    readonly name: FieldRef<"FlashcardSet", 'String'>
    readonly description: FieldRef<"FlashcardSet", 'String'>
    readonly cleverTitle: FieldRef<"FlashcardSet", 'String'>
    readonly level: FieldRef<"FlashcardSet", 'String'>
    readonly goals: FieldRef<"FlashcardSet", 'String[]'>
    readonly specificTopics: FieldRef<"FlashcardSet", 'String'>
    readonly source: FieldRef<"FlashcardSet", 'String'>
    readonly imageUrl: FieldRef<"FlashcardSet", 'String'>
    readonly seriousnessLevel: FieldRef<"FlashcardSet", 'Int'>
    readonly toneLevel: FieldRef<"FlashcardSet", 'Int'>
    readonly llmBrand: FieldRef<"FlashcardSet", 'String'>
    readonly llmModel: FieldRef<"FlashcardSet", 'String'>
    readonly promptTemplate: FieldRef<"FlashcardSet", 'String'>
    readonly shareId: FieldRef<"FlashcardSet", 'String'>
    readonly isPublished: FieldRef<"FlashcardSet", 'Boolean'>
    readonly publishedSetId: FieldRef<"FlashcardSet", 'String'>
    readonly createdAt: FieldRef<"FlashcardSet", 'DateTime'>
    readonly updatedAt: FieldRef<"FlashcardSet", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FlashcardSet findUnique
   */
  export type FlashcardSetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlashcardSet
     */
    select?: FlashcardSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlashcardSet
     */
    omit?: FlashcardSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlashcardSetInclude<ExtArgs> | null
    /**
     * Filter, which FlashcardSet to fetch.
     */
    where: FlashcardSetWhereUniqueInput
  }

  /**
   * FlashcardSet findUniqueOrThrow
   */
  export type FlashcardSetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlashcardSet
     */
    select?: FlashcardSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlashcardSet
     */
    omit?: FlashcardSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlashcardSetInclude<ExtArgs> | null
    /**
     * Filter, which FlashcardSet to fetch.
     */
    where: FlashcardSetWhereUniqueInput
  }

  /**
   * FlashcardSet findFirst
   */
  export type FlashcardSetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlashcardSet
     */
    select?: FlashcardSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlashcardSet
     */
    omit?: FlashcardSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlashcardSetInclude<ExtArgs> | null
    /**
     * Filter, which FlashcardSet to fetch.
     */
    where?: FlashcardSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FlashcardSets to fetch.
     */
    orderBy?: FlashcardSetOrderByWithRelationInput | FlashcardSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FlashcardSets.
     */
    cursor?: FlashcardSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FlashcardSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FlashcardSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FlashcardSets.
     */
    distinct?: FlashcardSetScalarFieldEnum | FlashcardSetScalarFieldEnum[]
  }

  /**
   * FlashcardSet findFirstOrThrow
   */
  export type FlashcardSetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlashcardSet
     */
    select?: FlashcardSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlashcardSet
     */
    omit?: FlashcardSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlashcardSetInclude<ExtArgs> | null
    /**
     * Filter, which FlashcardSet to fetch.
     */
    where?: FlashcardSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FlashcardSets to fetch.
     */
    orderBy?: FlashcardSetOrderByWithRelationInput | FlashcardSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FlashcardSets.
     */
    cursor?: FlashcardSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FlashcardSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FlashcardSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FlashcardSets.
     */
    distinct?: FlashcardSetScalarFieldEnum | FlashcardSetScalarFieldEnum[]
  }

  /**
   * FlashcardSet findMany
   */
  export type FlashcardSetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlashcardSet
     */
    select?: FlashcardSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlashcardSet
     */
    omit?: FlashcardSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlashcardSetInclude<ExtArgs> | null
    /**
     * Filter, which FlashcardSets to fetch.
     */
    where?: FlashcardSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FlashcardSets to fetch.
     */
    orderBy?: FlashcardSetOrderByWithRelationInput | FlashcardSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FlashcardSets.
     */
    cursor?: FlashcardSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FlashcardSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FlashcardSets.
     */
    skip?: number
    distinct?: FlashcardSetScalarFieldEnum | FlashcardSetScalarFieldEnum[]
  }

  /**
   * FlashcardSet create
   */
  export type FlashcardSetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlashcardSet
     */
    select?: FlashcardSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlashcardSet
     */
    omit?: FlashcardSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlashcardSetInclude<ExtArgs> | null
    /**
     * The data needed to create a FlashcardSet.
     */
    data: XOR<FlashcardSetCreateInput, FlashcardSetUncheckedCreateInput>
  }

  /**
   * FlashcardSet createMany
   */
  export type FlashcardSetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FlashcardSets.
     */
    data: FlashcardSetCreateManyInput | FlashcardSetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FlashcardSet createManyAndReturn
   */
  export type FlashcardSetCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlashcardSet
     */
    select?: FlashcardSetSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FlashcardSet
     */
    omit?: FlashcardSetOmit<ExtArgs> | null
    /**
     * The data used to create many FlashcardSets.
     */
    data: FlashcardSetCreateManyInput | FlashcardSetCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlashcardSetIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FlashcardSet update
   */
  export type FlashcardSetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlashcardSet
     */
    select?: FlashcardSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlashcardSet
     */
    omit?: FlashcardSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlashcardSetInclude<ExtArgs> | null
    /**
     * The data needed to update a FlashcardSet.
     */
    data: XOR<FlashcardSetUpdateInput, FlashcardSetUncheckedUpdateInput>
    /**
     * Choose, which FlashcardSet to update.
     */
    where: FlashcardSetWhereUniqueInput
  }

  /**
   * FlashcardSet updateMany
   */
  export type FlashcardSetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FlashcardSets.
     */
    data: XOR<FlashcardSetUpdateManyMutationInput, FlashcardSetUncheckedUpdateManyInput>
    /**
     * Filter which FlashcardSets to update
     */
    where?: FlashcardSetWhereInput
    /**
     * Limit how many FlashcardSets to update.
     */
    limit?: number
  }

  /**
   * FlashcardSet updateManyAndReturn
   */
  export type FlashcardSetUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlashcardSet
     */
    select?: FlashcardSetSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FlashcardSet
     */
    omit?: FlashcardSetOmit<ExtArgs> | null
    /**
     * The data used to update FlashcardSets.
     */
    data: XOR<FlashcardSetUpdateManyMutationInput, FlashcardSetUncheckedUpdateManyInput>
    /**
     * Filter which FlashcardSets to update
     */
    where?: FlashcardSetWhereInput
    /**
     * Limit how many FlashcardSets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlashcardSetIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FlashcardSet upsert
   */
  export type FlashcardSetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlashcardSet
     */
    select?: FlashcardSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlashcardSet
     */
    omit?: FlashcardSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlashcardSetInclude<ExtArgs> | null
    /**
     * The filter to search for the FlashcardSet to update in case it exists.
     */
    where: FlashcardSetWhereUniqueInput
    /**
     * In case the FlashcardSet found by the `where` argument doesn't exist, create a new FlashcardSet with this data.
     */
    create: XOR<FlashcardSetCreateInput, FlashcardSetUncheckedCreateInput>
    /**
     * In case the FlashcardSet was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FlashcardSetUpdateInput, FlashcardSetUncheckedUpdateInput>
  }

  /**
   * FlashcardSet delete
   */
  export type FlashcardSetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlashcardSet
     */
    select?: FlashcardSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlashcardSet
     */
    omit?: FlashcardSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlashcardSetInclude<ExtArgs> | null
    /**
     * Filter which FlashcardSet to delete.
     */
    where: FlashcardSetWhereUniqueInput
  }

  /**
   * FlashcardSet deleteMany
   */
  export type FlashcardSetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FlashcardSets to delete
     */
    where?: FlashcardSetWhereInput
    /**
     * Limit how many FlashcardSets to delete.
     */
    limit?: number
  }

  /**
   * FlashcardSet.phrases
   */
  export type FlashcardSet$phrasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Phrase
     */
    select?: PhraseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Phrase
     */
    omit?: PhraseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhraseInclude<ExtArgs> | null
    where?: PhraseWhereInput
    orderBy?: PhraseOrderByWithRelationInput | PhraseOrderByWithRelationInput[]
    cursor?: PhraseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PhraseScalarFieldEnum | PhraseScalarFieldEnum[]
  }

  /**
   * FlashcardSet.progress
   */
  export type FlashcardSet$progressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSetProgress
     */
    select?: UserSetProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSetProgress
     */
    omit?: UserSetProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSetProgressInclude<ExtArgs> | null
    where?: UserSetProgressWhereInput
    orderBy?: UserSetProgressOrderByWithRelationInput | UserSetProgressOrderByWithRelationInput[]
    cursor?: UserSetProgressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserSetProgressScalarFieldEnum | UserSetProgressScalarFieldEnum[]
  }

  /**
   * FlashcardSet.publishedSet
   */
  export type FlashcardSet$publishedSetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublishedSet
     */
    select?: PublishedSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PublishedSet
     */
    omit?: PublishedSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublishedSetInclude<ExtArgs> | null
    where?: PublishedSetWhereInput
  }

  /**
   * FlashcardSet without action
   */
  export type FlashcardSetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlashcardSet
     */
    select?: FlashcardSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlashcardSet
     */
    omit?: FlashcardSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlashcardSetInclude<ExtArgs> | null
  }


  /**
   * Model Phrase
   */

  export type AggregatePhrase = {
    _count: PhraseCountAggregateOutputType | null
    _avg: PhraseAvgAggregateOutputType | null
    _sum: PhraseSumAggregateOutputType | null
    _min: PhraseMinAggregateOutputType | null
    _max: PhraseMaxAggregateOutputType | null
  }

  export type PhraseAvgAggregateOutputType = {
    difficulty: number | null
  }

  export type PhraseSumAggregateOutputType = {
    difficulty: number | null
  }

  export type PhraseMinAggregateOutputType = {
    id: string | null
    setId: string | null
    english: string | null
    thai: string | null
    thaiMasculine: string | null
    thaiFeminine: string | null
    pronunciation: string | null
    mnemonic: string | null
    difficulty: number | null
    audioUrl: string | null
  }

  export type PhraseMaxAggregateOutputType = {
    id: string | null
    setId: string | null
    english: string | null
    thai: string | null
    thaiMasculine: string | null
    thaiFeminine: string | null
    pronunciation: string | null
    mnemonic: string | null
    difficulty: number | null
    audioUrl: string | null
  }

  export type PhraseCountAggregateOutputType = {
    id: number
    setId: number
    english: number
    thai: number
    thaiMasculine: number
    thaiFeminine: number
    pronunciation: number
    mnemonic: number
    examplesJson: number
    difficulty: number
    tags: number
    audioUrl: number
    _all: number
  }


  export type PhraseAvgAggregateInputType = {
    difficulty?: true
  }

  export type PhraseSumAggregateInputType = {
    difficulty?: true
  }

  export type PhraseMinAggregateInputType = {
    id?: true
    setId?: true
    english?: true
    thai?: true
    thaiMasculine?: true
    thaiFeminine?: true
    pronunciation?: true
    mnemonic?: true
    difficulty?: true
    audioUrl?: true
  }

  export type PhraseMaxAggregateInputType = {
    id?: true
    setId?: true
    english?: true
    thai?: true
    thaiMasculine?: true
    thaiFeminine?: true
    pronunciation?: true
    mnemonic?: true
    difficulty?: true
    audioUrl?: true
  }

  export type PhraseCountAggregateInputType = {
    id?: true
    setId?: true
    english?: true
    thai?: true
    thaiMasculine?: true
    thaiFeminine?: true
    pronunciation?: true
    mnemonic?: true
    examplesJson?: true
    difficulty?: true
    tags?: true
    audioUrl?: true
    _all?: true
  }

  export type PhraseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Phrase to aggregate.
     */
    where?: PhraseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Phrases to fetch.
     */
    orderBy?: PhraseOrderByWithRelationInput | PhraseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PhraseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Phrases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Phrases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Phrases
    **/
    _count?: true | PhraseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PhraseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PhraseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PhraseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PhraseMaxAggregateInputType
  }

  export type GetPhraseAggregateType<T extends PhraseAggregateArgs> = {
        [P in keyof T & keyof AggregatePhrase]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePhrase[P]>
      : GetScalarType<T[P], AggregatePhrase[P]>
  }




  export type PhraseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PhraseWhereInput
    orderBy?: PhraseOrderByWithAggregationInput | PhraseOrderByWithAggregationInput[]
    by: PhraseScalarFieldEnum[] | PhraseScalarFieldEnum
    having?: PhraseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PhraseCountAggregateInputType | true
    _avg?: PhraseAvgAggregateInputType
    _sum?: PhraseSumAggregateInputType
    _min?: PhraseMinAggregateInputType
    _max?: PhraseMaxAggregateInputType
  }

  export type PhraseGroupByOutputType = {
    id: string
    setId: string
    english: string
    thai: string
    thaiMasculine: string
    thaiFeminine: string
    pronunciation: string
    mnemonic: string | null
    examplesJson: JsonValue | null
    difficulty: number
    tags: string[]
    audioUrl: string | null
    _count: PhraseCountAggregateOutputType | null
    _avg: PhraseAvgAggregateOutputType | null
    _sum: PhraseSumAggregateOutputType | null
    _min: PhraseMinAggregateOutputType | null
    _max: PhraseMaxAggregateOutputType | null
  }

  type GetPhraseGroupByPayload<T extends PhraseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PhraseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PhraseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PhraseGroupByOutputType[P]>
            : GetScalarType<T[P], PhraseGroupByOutputType[P]>
        }
      >
    >


  export type PhraseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    setId?: boolean
    english?: boolean
    thai?: boolean
    thaiMasculine?: boolean
    thaiFeminine?: boolean
    pronunciation?: boolean
    mnemonic?: boolean
    examplesJson?: boolean
    difficulty?: boolean
    tags?: boolean
    audioUrl?: boolean
    flashcardSet?: boolean | FlashcardSetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["phrase"]>

  export type PhraseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    setId?: boolean
    english?: boolean
    thai?: boolean
    thaiMasculine?: boolean
    thaiFeminine?: boolean
    pronunciation?: boolean
    mnemonic?: boolean
    examplesJson?: boolean
    difficulty?: boolean
    tags?: boolean
    audioUrl?: boolean
    flashcardSet?: boolean | FlashcardSetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["phrase"]>

  export type PhraseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    setId?: boolean
    english?: boolean
    thai?: boolean
    thaiMasculine?: boolean
    thaiFeminine?: boolean
    pronunciation?: boolean
    mnemonic?: boolean
    examplesJson?: boolean
    difficulty?: boolean
    tags?: boolean
    audioUrl?: boolean
    flashcardSet?: boolean | FlashcardSetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["phrase"]>

  export type PhraseSelectScalar = {
    id?: boolean
    setId?: boolean
    english?: boolean
    thai?: boolean
    thaiMasculine?: boolean
    thaiFeminine?: boolean
    pronunciation?: boolean
    mnemonic?: boolean
    examplesJson?: boolean
    difficulty?: boolean
    tags?: boolean
    audioUrl?: boolean
  }

  export type PhraseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "setId" | "english" | "thai" | "thaiMasculine" | "thaiFeminine" | "pronunciation" | "mnemonic" | "examplesJson" | "difficulty" | "tags" | "audioUrl", ExtArgs["result"]["phrase"]>
  export type PhraseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    flashcardSet?: boolean | FlashcardSetDefaultArgs<ExtArgs>
  }
  export type PhraseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    flashcardSet?: boolean | FlashcardSetDefaultArgs<ExtArgs>
  }
  export type PhraseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    flashcardSet?: boolean | FlashcardSetDefaultArgs<ExtArgs>
  }

  export type $PhrasePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Phrase"
    objects: {
      flashcardSet: Prisma.$FlashcardSetPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      setId: string
      english: string
      thai: string
      thaiMasculine: string
      thaiFeminine: string
      pronunciation: string
      mnemonic: string | null
      examplesJson: Prisma.JsonValue | null
      difficulty: number
      tags: string[]
      audioUrl: string | null
    }, ExtArgs["result"]["phrase"]>
    composites: {}
  }

  type PhraseGetPayload<S extends boolean | null | undefined | PhraseDefaultArgs> = $Result.GetResult<Prisma.$PhrasePayload, S>

  type PhraseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PhraseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PhraseCountAggregateInputType | true
    }

  export interface PhraseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Phrase'], meta: { name: 'Phrase' } }
    /**
     * Find zero or one Phrase that matches the filter.
     * @param {PhraseFindUniqueArgs} args - Arguments to find a Phrase
     * @example
     * // Get one Phrase
     * const phrase = await prisma.phrase.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PhraseFindUniqueArgs>(args: SelectSubset<T, PhraseFindUniqueArgs<ExtArgs>>): Prisma__PhraseClient<$Result.GetResult<Prisma.$PhrasePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Phrase that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PhraseFindUniqueOrThrowArgs} args - Arguments to find a Phrase
     * @example
     * // Get one Phrase
     * const phrase = await prisma.phrase.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PhraseFindUniqueOrThrowArgs>(args: SelectSubset<T, PhraseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PhraseClient<$Result.GetResult<Prisma.$PhrasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Phrase that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhraseFindFirstArgs} args - Arguments to find a Phrase
     * @example
     * // Get one Phrase
     * const phrase = await prisma.phrase.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PhraseFindFirstArgs>(args?: SelectSubset<T, PhraseFindFirstArgs<ExtArgs>>): Prisma__PhraseClient<$Result.GetResult<Prisma.$PhrasePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Phrase that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhraseFindFirstOrThrowArgs} args - Arguments to find a Phrase
     * @example
     * // Get one Phrase
     * const phrase = await prisma.phrase.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PhraseFindFirstOrThrowArgs>(args?: SelectSubset<T, PhraseFindFirstOrThrowArgs<ExtArgs>>): Prisma__PhraseClient<$Result.GetResult<Prisma.$PhrasePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Phrases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhraseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Phrases
     * const phrases = await prisma.phrase.findMany()
     * 
     * // Get first 10 Phrases
     * const phrases = await prisma.phrase.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const phraseWithIdOnly = await prisma.phrase.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PhraseFindManyArgs>(args?: SelectSubset<T, PhraseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PhrasePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Phrase.
     * @param {PhraseCreateArgs} args - Arguments to create a Phrase.
     * @example
     * // Create one Phrase
     * const Phrase = await prisma.phrase.create({
     *   data: {
     *     // ... data to create a Phrase
     *   }
     * })
     * 
     */
    create<T extends PhraseCreateArgs>(args: SelectSubset<T, PhraseCreateArgs<ExtArgs>>): Prisma__PhraseClient<$Result.GetResult<Prisma.$PhrasePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Phrases.
     * @param {PhraseCreateManyArgs} args - Arguments to create many Phrases.
     * @example
     * // Create many Phrases
     * const phrase = await prisma.phrase.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PhraseCreateManyArgs>(args?: SelectSubset<T, PhraseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Phrases and returns the data saved in the database.
     * @param {PhraseCreateManyAndReturnArgs} args - Arguments to create many Phrases.
     * @example
     * // Create many Phrases
     * const phrase = await prisma.phrase.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Phrases and only return the `id`
     * const phraseWithIdOnly = await prisma.phrase.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PhraseCreateManyAndReturnArgs>(args?: SelectSubset<T, PhraseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PhrasePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Phrase.
     * @param {PhraseDeleteArgs} args - Arguments to delete one Phrase.
     * @example
     * // Delete one Phrase
     * const Phrase = await prisma.phrase.delete({
     *   where: {
     *     // ... filter to delete one Phrase
     *   }
     * })
     * 
     */
    delete<T extends PhraseDeleteArgs>(args: SelectSubset<T, PhraseDeleteArgs<ExtArgs>>): Prisma__PhraseClient<$Result.GetResult<Prisma.$PhrasePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Phrase.
     * @param {PhraseUpdateArgs} args - Arguments to update one Phrase.
     * @example
     * // Update one Phrase
     * const phrase = await prisma.phrase.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PhraseUpdateArgs>(args: SelectSubset<T, PhraseUpdateArgs<ExtArgs>>): Prisma__PhraseClient<$Result.GetResult<Prisma.$PhrasePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Phrases.
     * @param {PhraseDeleteManyArgs} args - Arguments to filter Phrases to delete.
     * @example
     * // Delete a few Phrases
     * const { count } = await prisma.phrase.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PhraseDeleteManyArgs>(args?: SelectSubset<T, PhraseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Phrases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhraseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Phrases
     * const phrase = await prisma.phrase.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PhraseUpdateManyArgs>(args: SelectSubset<T, PhraseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Phrases and returns the data updated in the database.
     * @param {PhraseUpdateManyAndReturnArgs} args - Arguments to update many Phrases.
     * @example
     * // Update many Phrases
     * const phrase = await prisma.phrase.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Phrases and only return the `id`
     * const phraseWithIdOnly = await prisma.phrase.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PhraseUpdateManyAndReturnArgs>(args: SelectSubset<T, PhraseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PhrasePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Phrase.
     * @param {PhraseUpsertArgs} args - Arguments to update or create a Phrase.
     * @example
     * // Update or create a Phrase
     * const phrase = await prisma.phrase.upsert({
     *   create: {
     *     // ... data to create a Phrase
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Phrase we want to update
     *   }
     * })
     */
    upsert<T extends PhraseUpsertArgs>(args: SelectSubset<T, PhraseUpsertArgs<ExtArgs>>): Prisma__PhraseClient<$Result.GetResult<Prisma.$PhrasePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Phrases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhraseCountArgs} args - Arguments to filter Phrases to count.
     * @example
     * // Count the number of Phrases
     * const count = await prisma.phrase.count({
     *   where: {
     *     // ... the filter for the Phrases we want to count
     *   }
     * })
    **/
    count<T extends PhraseCountArgs>(
      args?: Subset<T, PhraseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PhraseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Phrase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhraseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PhraseAggregateArgs>(args: Subset<T, PhraseAggregateArgs>): Prisma.PrismaPromise<GetPhraseAggregateType<T>>

    /**
     * Group by Phrase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhraseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PhraseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PhraseGroupByArgs['orderBy'] }
        : { orderBy?: PhraseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PhraseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPhraseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Phrase model
   */
  readonly fields: PhraseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Phrase.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PhraseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    flashcardSet<T extends FlashcardSetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FlashcardSetDefaultArgs<ExtArgs>>): Prisma__FlashcardSetClient<$Result.GetResult<Prisma.$FlashcardSetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Phrase model
   */
  interface PhraseFieldRefs {
    readonly id: FieldRef<"Phrase", 'String'>
    readonly setId: FieldRef<"Phrase", 'String'>
    readonly english: FieldRef<"Phrase", 'String'>
    readonly thai: FieldRef<"Phrase", 'String'>
    readonly thaiMasculine: FieldRef<"Phrase", 'String'>
    readonly thaiFeminine: FieldRef<"Phrase", 'String'>
    readonly pronunciation: FieldRef<"Phrase", 'String'>
    readonly mnemonic: FieldRef<"Phrase", 'String'>
    readonly examplesJson: FieldRef<"Phrase", 'Json'>
    readonly difficulty: FieldRef<"Phrase", 'Int'>
    readonly tags: FieldRef<"Phrase", 'String[]'>
    readonly audioUrl: FieldRef<"Phrase", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Phrase findUnique
   */
  export type PhraseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Phrase
     */
    select?: PhraseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Phrase
     */
    omit?: PhraseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhraseInclude<ExtArgs> | null
    /**
     * Filter, which Phrase to fetch.
     */
    where: PhraseWhereUniqueInput
  }

  /**
   * Phrase findUniqueOrThrow
   */
  export type PhraseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Phrase
     */
    select?: PhraseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Phrase
     */
    omit?: PhraseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhraseInclude<ExtArgs> | null
    /**
     * Filter, which Phrase to fetch.
     */
    where: PhraseWhereUniqueInput
  }

  /**
   * Phrase findFirst
   */
  export type PhraseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Phrase
     */
    select?: PhraseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Phrase
     */
    omit?: PhraseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhraseInclude<ExtArgs> | null
    /**
     * Filter, which Phrase to fetch.
     */
    where?: PhraseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Phrases to fetch.
     */
    orderBy?: PhraseOrderByWithRelationInput | PhraseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Phrases.
     */
    cursor?: PhraseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Phrases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Phrases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Phrases.
     */
    distinct?: PhraseScalarFieldEnum | PhraseScalarFieldEnum[]
  }

  /**
   * Phrase findFirstOrThrow
   */
  export type PhraseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Phrase
     */
    select?: PhraseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Phrase
     */
    omit?: PhraseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhraseInclude<ExtArgs> | null
    /**
     * Filter, which Phrase to fetch.
     */
    where?: PhraseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Phrases to fetch.
     */
    orderBy?: PhraseOrderByWithRelationInput | PhraseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Phrases.
     */
    cursor?: PhraseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Phrases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Phrases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Phrases.
     */
    distinct?: PhraseScalarFieldEnum | PhraseScalarFieldEnum[]
  }

  /**
   * Phrase findMany
   */
  export type PhraseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Phrase
     */
    select?: PhraseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Phrase
     */
    omit?: PhraseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhraseInclude<ExtArgs> | null
    /**
     * Filter, which Phrases to fetch.
     */
    where?: PhraseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Phrases to fetch.
     */
    orderBy?: PhraseOrderByWithRelationInput | PhraseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Phrases.
     */
    cursor?: PhraseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Phrases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Phrases.
     */
    skip?: number
    distinct?: PhraseScalarFieldEnum | PhraseScalarFieldEnum[]
  }

  /**
   * Phrase create
   */
  export type PhraseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Phrase
     */
    select?: PhraseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Phrase
     */
    omit?: PhraseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhraseInclude<ExtArgs> | null
    /**
     * The data needed to create a Phrase.
     */
    data: XOR<PhraseCreateInput, PhraseUncheckedCreateInput>
  }

  /**
   * Phrase createMany
   */
  export type PhraseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Phrases.
     */
    data: PhraseCreateManyInput | PhraseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Phrase createManyAndReturn
   */
  export type PhraseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Phrase
     */
    select?: PhraseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Phrase
     */
    omit?: PhraseOmit<ExtArgs> | null
    /**
     * The data used to create many Phrases.
     */
    data: PhraseCreateManyInput | PhraseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhraseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Phrase update
   */
  export type PhraseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Phrase
     */
    select?: PhraseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Phrase
     */
    omit?: PhraseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhraseInclude<ExtArgs> | null
    /**
     * The data needed to update a Phrase.
     */
    data: XOR<PhraseUpdateInput, PhraseUncheckedUpdateInput>
    /**
     * Choose, which Phrase to update.
     */
    where: PhraseWhereUniqueInput
  }

  /**
   * Phrase updateMany
   */
  export type PhraseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Phrases.
     */
    data: XOR<PhraseUpdateManyMutationInput, PhraseUncheckedUpdateManyInput>
    /**
     * Filter which Phrases to update
     */
    where?: PhraseWhereInput
    /**
     * Limit how many Phrases to update.
     */
    limit?: number
  }

  /**
   * Phrase updateManyAndReturn
   */
  export type PhraseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Phrase
     */
    select?: PhraseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Phrase
     */
    omit?: PhraseOmit<ExtArgs> | null
    /**
     * The data used to update Phrases.
     */
    data: XOR<PhraseUpdateManyMutationInput, PhraseUncheckedUpdateManyInput>
    /**
     * Filter which Phrases to update
     */
    where?: PhraseWhereInput
    /**
     * Limit how many Phrases to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhraseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Phrase upsert
   */
  export type PhraseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Phrase
     */
    select?: PhraseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Phrase
     */
    omit?: PhraseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhraseInclude<ExtArgs> | null
    /**
     * The filter to search for the Phrase to update in case it exists.
     */
    where: PhraseWhereUniqueInput
    /**
     * In case the Phrase found by the `where` argument doesn't exist, create a new Phrase with this data.
     */
    create: XOR<PhraseCreateInput, PhraseUncheckedCreateInput>
    /**
     * In case the Phrase was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PhraseUpdateInput, PhraseUncheckedUpdateInput>
  }

  /**
   * Phrase delete
   */
  export type PhraseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Phrase
     */
    select?: PhraseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Phrase
     */
    omit?: PhraseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhraseInclude<ExtArgs> | null
    /**
     * Filter which Phrase to delete.
     */
    where: PhraseWhereUniqueInput
  }

  /**
   * Phrase deleteMany
   */
  export type PhraseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Phrases to delete
     */
    where?: PhraseWhereInput
    /**
     * Limit how many Phrases to delete.
     */
    limit?: number
  }

  /**
   * Phrase without action
   */
  export type PhraseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Phrase
     */
    select?: PhraseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Phrase
     */
    omit?: PhraseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhraseInclude<ExtArgs> | null
  }


  /**
   * Model UserSetProgress
   */

  export type AggregateUserSetProgress = {
    _count: UserSetProgressCountAggregateOutputType | null
    _avg: UserSetProgressAvgAggregateOutputType | null
    _sum: UserSetProgressSumAggregateOutputType | null
    _min: UserSetProgressMinAggregateOutputType | null
    _max: UserSetProgressMaxAggregateOutputType | null
  }

  export type UserSetProgressAvgAggregateOutputType = {
    streak: number | null
    bestStreak: number | null
    totalReviews: number | null
  }

  export type UserSetProgressSumAggregateOutputType = {
    streak: number | null
    bestStreak: number | null
    totalReviews: number | null
  }

  export type UserSetProgressMinAggregateOutputType = {
    id: string | null
    userId: string | null
    setId: string | null
    lastAccessedAt: Date | null
    streak: number | null
    bestStreak: number | null
    totalReviews: number | null
  }

  export type UserSetProgressMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    setId: string | null
    lastAccessedAt: Date | null
    streak: number | null
    bestStreak: number | null
    totalReviews: number | null
  }

  export type UserSetProgressCountAggregateOutputType = {
    id: number
    userId: number
    setId: number
    progressData: number
    lastAccessedAt: number
    streak: number
    bestStreak: number
    totalReviews: number
    _all: number
  }


  export type UserSetProgressAvgAggregateInputType = {
    streak?: true
    bestStreak?: true
    totalReviews?: true
  }

  export type UserSetProgressSumAggregateInputType = {
    streak?: true
    bestStreak?: true
    totalReviews?: true
  }

  export type UserSetProgressMinAggregateInputType = {
    id?: true
    userId?: true
    setId?: true
    lastAccessedAt?: true
    streak?: true
    bestStreak?: true
    totalReviews?: true
  }

  export type UserSetProgressMaxAggregateInputType = {
    id?: true
    userId?: true
    setId?: true
    lastAccessedAt?: true
    streak?: true
    bestStreak?: true
    totalReviews?: true
  }

  export type UserSetProgressCountAggregateInputType = {
    id?: true
    userId?: true
    setId?: true
    progressData?: true
    lastAccessedAt?: true
    streak?: true
    bestStreak?: true
    totalReviews?: true
    _all?: true
  }

  export type UserSetProgressAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSetProgress to aggregate.
     */
    where?: UserSetProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSetProgresses to fetch.
     */
    orderBy?: UserSetProgressOrderByWithRelationInput | UserSetProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserSetProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSetProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSetProgresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserSetProgresses
    **/
    _count?: true | UserSetProgressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserSetProgressAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSetProgressSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserSetProgressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserSetProgressMaxAggregateInputType
  }

  export type GetUserSetProgressAggregateType<T extends UserSetProgressAggregateArgs> = {
        [P in keyof T & keyof AggregateUserSetProgress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserSetProgress[P]>
      : GetScalarType<T[P], AggregateUserSetProgress[P]>
  }




  export type UserSetProgressGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSetProgressWhereInput
    orderBy?: UserSetProgressOrderByWithAggregationInput | UserSetProgressOrderByWithAggregationInput[]
    by: UserSetProgressScalarFieldEnum[] | UserSetProgressScalarFieldEnum
    having?: UserSetProgressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserSetProgressCountAggregateInputType | true
    _avg?: UserSetProgressAvgAggregateInputType
    _sum?: UserSetProgressSumAggregateInputType
    _min?: UserSetProgressMinAggregateInputType
    _max?: UserSetProgressMaxAggregateInputType
  }

  export type UserSetProgressGroupByOutputType = {
    id: string
    userId: string
    setId: string
    progressData: JsonValue
    lastAccessedAt: Date
    streak: number
    bestStreak: number
    totalReviews: number
    _count: UserSetProgressCountAggregateOutputType | null
    _avg: UserSetProgressAvgAggregateOutputType | null
    _sum: UserSetProgressSumAggregateOutputType | null
    _min: UserSetProgressMinAggregateOutputType | null
    _max: UserSetProgressMaxAggregateOutputType | null
  }

  type GetUserSetProgressGroupByPayload<T extends UserSetProgressGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserSetProgressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserSetProgressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserSetProgressGroupByOutputType[P]>
            : GetScalarType<T[P], UserSetProgressGroupByOutputType[P]>
        }
      >
    >


  export type UserSetProgressSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    setId?: boolean
    progressData?: boolean
    lastAccessedAt?: boolean
    streak?: boolean
    bestStreak?: boolean
    totalReviews?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    set?: boolean | FlashcardSetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSetProgress"]>

  export type UserSetProgressSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    setId?: boolean
    progressData?: boolean
    lastAccessedAt?: boolean
    streak?: boolean
    bestStreak?: boolean
    totalReviews?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    set?: boolean | FlashcardSetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSetProgress"]>

  export type UserSetProgressSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    setId?: boolean
    progressData?: boolean
    lastAccessedAt?: boolean
    streak?: boolean
    bestStreak?: boolean
    totalReviews?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    set?: boolean | FlashcardSetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSetProgress"]>

  export type UserSetProgressSelectScalar = {
    id?: boolean
    userId?: boolean
    setId?: boolean
    progressData?: boolean
    lastAccessedAt?: boolean
    streak?: boolean
    bestStreak?: boolean
    totalReviews?: boolean
  }

  export type UserSetProgressOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "setId" | "progressData" | "lastAccessedAt" | "streak" | "bestStreak" | "totalReviews", ExtArgs["result"]["userSetProgress"]>
  export type UserSetProgressInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    set?: boolean | FlashcardSetDefaultArgs<ExtArgs>
  }
  export type UserSetProgressIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    set?: boolean | FlashcardSetDefaultArgs<ExtArgs>
  }
  export type UserSetProgressIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    set?: boolean | FlashcardSetDefaultArgs<ExtArgs>
  }

  export type $UserSetProgressPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserSetProgress"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      set: Prisma.$FlashcardSetPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      setId: string
      progressData: Prisma.JsonValue
      lastAccessedAt: Date
      streak: number
      bestStreak: number
      totalReviews: number
    }, ExtArgs["result"]["userSetProgress"]>
    composites: {}
  }

  type UserSetProgressGetPayload<S extends boolean | null | undefined | UserSetProgressDefaultArgs> = $Result.GetResult<Prisma.$UserSetProgressPayload, S>

  type UserSetProgressCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserSetProgressFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserSetProgressCountAggregateInputType | true
    }

  export interface UserSetProgressDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserSetProgress'], meta: { name: 'UserSetProgress' } }
    /**
     * Find zero or one UserSetProgress that matches the filter.
     * @param {UserSetProgressFindUniqueArgs} args - Arguments to find a UserSetProgress
     * @example
     * // Get one UserSetProgress
     * const userSetProgress = await prisma.userSetProgress.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserSetProgressFindUniqueArgs>(args: SelectSubset<T, UserSetProgressFindUniqueArgs<ExtArgs>>): Prisma__UserSetProgressClient<$Result.GetResult<Prisma.$UserSetProgressPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserSetProgress that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserSetProgressFindUniqueOrThrowArgs} args - Arguments to find a UserSetProgress
     * @example
     * // Get one UserSetProgress
     * const userSetProgress = await prisma.userSetProgress.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserSetProgressFindUniqueOrThrowArgs>(args: SelectSubset<T, UserSetProgressFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserSetProgressClient<$Result.GetResult<Prisma.$UserSetProgressPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserSetProgress that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSetProgressFindFirstArgs} args - Arguments to find a UserSetProgress
     * @example
     * // Get one UserSetProgress
     * const userSetProgress = await prisma.userSetProgress.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserSetProgressFindFirstArgs>(args?: SelectSubset<T, UserSetProgressFindFirstArgs<ExtArgs>>): Prisma__UserSetProgressClient<$Result.GetResult<Prisma.$UserSetProgressPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserSetProgress that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSetProgressFindFirstOrThrowArgs} args - Arguments to find a UserSetProgress
     * @example
     * // Get one UserSetProgress
     * const userSetProgress = await prisma.userSetProgress.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserSetProgressFindFirstOrThrowArgs>(args?: SelectSubset<T, UserSetProgressFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserSetProgressClient<$Result.GetResult<Prisma.$UserSetProgressPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserSetProgresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSetProgressFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserSetProgresses
     * const userSetProgresses = await prisma.userSetProgress.findMany()
     * 
     * // Get first 10 UserSetProgresses
     * const userSetProgresses = await prisma.userSetProgress.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userSetProgressWithIdOnly = await prisma.userSetProgress.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserSetProgressFindManyArgs>(args?: SelectSubset<T, UserSetProgressFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSetProgressPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserSetProgress.
     * @param {UserSetProgressCreateArgs} args - Arguments to create a UserSetProgress.
     * @example
     * // Create one UserSetProgress
     * const UserSetProgress = await prisma.userSetProgress.create({
     *   data: {
     *     // ... data to create a UserSetProgress
     *   }
     * })
     * 
     */
    create<T extends UserSetProgressCreateArgs>(args: SelectSubset<T, UserSetProgressCreateArgs<ExtArgs>>): Prisma__UserSetProgressClient<$Result.GetResult<Prisma.$UserSetProgressPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserSetProgresses.
     * @param {UserSetProgressCreateManyArgs} args - Arguments to create many UserSetProgresses.
     * @example
     * // Create many UserSetProgresses
     * const userSetProgress = await prisma.userSetProgress.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserSetProgressCreateManyArgs>(args?: SelectSubset<T, UserSetProgressCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserSetProgresses and returns the data saved in the database.
     * @param {UserSetProgressCreateManyAndReturnArgs} args - Arguments to create many UserSetProgresses.
     * @example
     * // Create many UserSetProgresses
     * const userSetProgress = await prisma.userSetProgress.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserSetProgresses and only return the `id`
     * const userSetProgressWithIdOnly = await prisma.userSetProgress.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserSetProgressCreateManyAndReturnArgs>(args?: SelectSubset<T, UserSetProgressCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSetProgressPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserSetProgress.
     * @param {UserSetProgressDeleteArgs} args - Arguments to delete one UserSetProgress.
     * @example
     * // Delete one UserSetProgress
     * const UserSetProgress = await prisma.userSetProgress.delete({
     *   where: {
     *     // ... filter to delete one UserSetProgress
     *   }
     * })
     * 
     */
    delete<T extends UserSetProgressDeleteArgs>(args: SelectSubset<T, UserSetProgressDeleteArgs<ExtArgs>>): Prisma__UserSetProgressClient<$Result.GetResult<Prisma.$UserSetProgressPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserSetProgress.
     * @param {UserSetProgressUpdateArgs} args - Arguments to update one UserSetProgress.
     * @example
     * // Update one UserSetProgress
     * const userSetProgress = await prisma.userSetProgress.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserSetProgressUpdateArgs>(args: SelectSubset<T, UserSetProgressUpdateArgs<ExtArgs>>): Prisma__UserSetProgressClient<$Result.GetResult<Prisma.$UserSetProgressPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserSetProgresses.
     * @param {UserSetProgressDeleteManyArgs} args - Arguments to filter UserSetProgresses to delete.
     * @example
     * // Delete a few UserSetProgresses
     * const { count } = await prisma.userSetProgress.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserSetProgressDeleteManyArgs>(args?: SelectSubset<T, UserSetProgressDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSetProgresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSetProgressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserSetProgresses
     * const userSetProgress = await prisma.userSetProgress.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserSetProgressUpdateManyArgs>(args: SelectSubset<T, UserSetProgressUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSetProgresses and returns the data updated in the database.
     * @param {UserSetProgressUpdateManyAndReturnArgs} args - Arguments to update many UserSetProgresses.
     * @example
     * // Update many UserSetProgresses
     * const userSetProgress = await prisma.userSetProgress.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserSetProgresses and only return the `id`
     * const userSetProgressWithIdOnly = await prisma.userSetProgress.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserSetProgressUpdateManyAndReturnArgs>(args: SelectSubset<T, UserSetProgressUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSetProgressPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserSetProgress.
     * @param {UserSetProgressUpsertArgs} args - Arguments to update or create a UserSetProgress.
     * @example
     * // Update or create a UserSetProgress
     * const userSetProgress = await prisma.userSetProgress.upsert({
     *   create: {
     *     // ... data to create a UserSetProgress
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserSetProgress we want to update
     *   }
     * })
     */
    upsert<T extends UserSetProgressUpsertArgs>(args: SelectSubset<T, UserSetProgressUpsertArgs<ExtArgs>>): Prisma__UserSetProgressClient<$Result.GetResult<Prisma.$UserSetProgressPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserSetProgresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSetProgressCountArgs} args - Arguments to filter UserSetProgresses to count.
     * @example
     * // Count the number of UserSetProgresses
     * const count = await prisma.userSetProgress.count({
     *   where: {
     *     // ... the filter for the UserSetProgresses we want to count
     *   }
     * })
    **/
    count<T extends UserSetProgressCountArgs>(
      args?: Subset<T, UserSetProgressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserSetProgressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserSetProgress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSetProgressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserSetProgressAggregateArgs>(args: Subset<T, UserSetProgressAggregateArgs>): Prisma.PrismaPromise<GetUserSetProgressAggregateType<T>>

    /**
     * Group by UserSetProgress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSetProgressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserSetProgressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserSetProgressGroupByArgs['orderBy'] }
        : { orderBy?: UserSetProgressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserSetProgressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserSetProgressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserSetProgress model
   */
  readonly fields: UserSetProgressFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserSetProgress.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserSetProgressClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    set<T extends FlashcardSetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FlashcardSetDefaultArgs<ExtArgs>>): Prisma__FlashcardSetClient<$Result.GetResult<Prisma.$FlashcardSetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserSetProgress model
   */
  interface UserSetProgressFieldRefs {
    readonly id: FieldRef<"UserSetProgress", 'String'>
    readonly userId: FieldRef<"UserSetProgress", 'String'>
    readonly setId: FieldRef<"UserSetProgress", 'String'>
    readonly progressData: FieldRef<"UserSetProgress", 'Json'>
    readonly lastAccessedAt: FieldRef<"UserSetProgress", 'DateTime'>
    readonly streak: FieldRef<"UserSetProgress", 'Int'>
    readonly bestStreak: FieldRef<"UserSetProgress", 'Int'>
    readonly totalReviews: FieldRef<"UserSetProgress", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * UserSetProgress findUnique
   */
  export type UserSetProgressFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSetProgress
     */
    select?: UserSetProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSetProgress
     */
    omit?: UserSetProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSetProgressInclude<ExtArgs> | null
    /**
     * Filter, which UserSetProgress to fetch.
     */
    where: UserSetProgressWhereUniqueInput
  }

  /**
   * UserSetProgress findUniqueOrThrow
   */
  export type UserSetProgressFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSetProgress
     */
    select?: UserSetProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSetProgress
     */
    omit?: UserSetProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSetProgressInclude<ExtArgs> | null
    /**
     * Filter, which UserSetProgress to fetch.
     */
    where: UserSetProgressWhereUniqueInput
  }

  /**
   * UserSetProgress findFirst
   */
  export type UserSetProgressFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSetProgress
     */
    select?: UserSetProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSetProgress
     */
    omit?: UserSetProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSetProgressInclude<ExtArgs> | null
    /**
     * Filter, which UserSetProgress to fetch.
     */
    where?: UserSetProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSetProgresses to fetch.
     */
    orderBy?: UserSetProgressOrderByWithRelationInput | UserSetProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSetProgresses.
     */
    cursor?: UserSetProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSetProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSetProgresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSetProgresses.
     */
    distinct?: UserSetProgressScalarFieldEnum | UserSetProgressScalarFieldEnum[]
  }

  /**
   * UserSetProgress findFirstOrThrow
   */
  export type UserSetProgressFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSetProgress
     */
    select?: UserSetProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSetProgress
     */
    omit?: UserSetProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSetProgressInclude<ExtArgs> | null
    /**
     * Filter, which UserSetProgress to fetch.
     */
    where?: UserSetProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSetProgresses to fetch.
     */
    orderBy?: UserSetProgressOrderByWithRelationInput | UserSetProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSetProgresses.
     */
    cursor?: UserSetProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSetProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSetProgresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSetProgresses.
     */
    distinct?: UserSetProgressScalarFieldEnum | UserSetProgressScalarFieldEnum[]
  }

  /**
   * UserSetProgress findMany
   */
  export type UserSetProgressFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSetProgress
     */
    select?: UserSetProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSetProgress
     */
    omit?: UserSetProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSetProgressInclude<ExtArgs> | null
    /**
     * Filter, which UserSetProgresses to fetch.
     */
    where?: UserSetProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSetProgresses to fetch.
     */
    orderBy?: UserSetProgressOrderByWithRelationInput | UserSetProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserSetProgresses.
     */
    cursor?: UserSetProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSetProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSetProgresses.
     */
    skip?: number
    distinct?: UserSetProgressScalarFieldEnum | UserSetProgressScalarFieldEnum[]
  }

  /**
   * UserSetProgress create
   */
  export type UserSetProgressCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSetProgress
     */
    select?: UserSetProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSetProgress
     */
    omit?: UserSetProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSetProgressInclude<ExtArgs> | null
    /**
     * The data needed to create a UserSetProgress.
     */
    data: XOR<UserSetProgressCreateInput, UserSetProgressUncheckedCreateInput>
  }

  /**
   * UserSetProgress createMany
   */
  export type UserSetProgressCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserSetProgresses.
     */
    data: UserSetProgressCreateManyInput | UserSetProgressCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserSetProgress createManyAndReturn
   */
  export type UserSetProgressCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSetProgress
     */
    select?: UserSetProgressSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserSetProgress
     */
    omit?: UserSetProgressOmit<ExtArgs> | null
    /**
     * The data used to create many UserSetProgresses.
     */
    data: UserSetProgressCreateManyInput | UserSetProgressCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSetProgressIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserSetProgress update
   */
  export type UserSetProgressUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSetProgress
     */
    select?: UserSetProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSetProgress
     */
    omit?: UserSetProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSetProgressInclude<ExtArgs> | null
    /**
     * The data needed to update a UserSetProgress.
     */
    data: XOR<UserSetProgressUpdateInput, UserSetProgressUncheckedUpdateInput>
    /**
     * Choose, which UserSetProgress to update.
     */
    where: UserSetProgressWhereUniqueInput
  }

  /**
   * UserSetProgress updateMany
   */
  export type UserSetProgressUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserSetProgresses.
     */
    data: XOR<UserSetProgressUpdateManyMutationInput, UserSetProgressUncheckedUpdateManyInput>
    /**
     * Filter which UserSetProgresses to update
     */
    where?: UserSetProgressWhereInput
    /**
     * Limit how many UserSetProgresses to update.
     */
    limit?: number
  }

  /**
   * UserSetProgress updateManyAndReturn
   */
  export type UserSetProgressUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSetProgress
     */
    select?: UserSetProgressSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserSetProgress
     */
    omit?: UserSetProgressOmit<ExtArgs> | null
    /**
     * The data used to update UserSetProgresses.
     */
    data: XOR<UserSetProgressUpdateManyMutationInput, UserSetProgressUncheckedUpdateManyInput>
    /**
     * Filter which UserSetProgresses to update
     */
    where?: UserSetProgressWhereInput
    /**
     * Limit how many UserSetProgresses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSetProgressIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserSetProgress upsert
   */
  export type UserSetProgressUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSetProgress
     */
    select?: UserSetProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSetProgress
     */
    omit?: UserSetProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSetProgressInclude<ExtArgs> | null
    /**
     * The filter to search for the UserSetProgress to update in case it exists.
     */
    where: UserSetProgressWhereUniqueInput
    /**
     * In case the UserSetProgress found by the `where` argument doesn't exist, create a new UserSetProgress with this data.
     */
    create: XOR<UserSetProgressCreateInput, UserSetProgressUncheckedCreateInput>
    /**
     * In case the UserSetProgress was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserSetProgressUpdateInput, UserSetProgressUncheckedUpdateInput>
  }

  /**
   * UserSetProgress delete
   */
  export type UserSetProgressDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSetProgress
     */
    select?: UserSetProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSetProgress
     */
    omit?: UserSetProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSetProgressInclude<ExtArgs> | null
    /**
     * Filter which UserSetProgress to delete.
     */
    where: UserSetProgressWhereUniqueInput
  }

  /**
   * UserSetProgress deleteMany
   */
  export type UserSetProgressDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSetProgresses to delete
     */
    where?: UserSetProgressWhereInput
    /**
     * Limit how many UserSetProgresses to delete.
     */
    limit?: number
  }

  /**
   * UserSetProgress without action
   */
  export type UserSetProgressDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSetProgress
     */
    select?: UserSetProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSetProgress
     */
    omit?: UserSetProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSetProgressInclude<ExtArgs> | null
  }


  /**
   * Model PublishedSet
   */

  export type AggregatePublishedSet = {
    _count: PublishedSetCountAggregateOutputType | null
    _avg: PublishedSetAvgAggregateOutputType | null
    _sum: PublishedSetSumAggregateOutputType | null
    _min: PublishedSetMinAggregateOutputType | null
    _max: PublishedSetMaxAggregateOutputType | null
  }

  export type PublishedSetAvgAggregateOutputType = {
    cardCount: number | null
    seriousnessLevel: number | null
    rating: number | null
    ratingCount: number | null
    downloads: number | null
  }

  export type PublishedSetSumAggregateOutputType = {
    cardCount: number | null
    seriousnessLevel: number | null
    rating: number | null
    ratingCount: number | null
    downloads: number | null
  }

  export type PublishedSetMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    imageUrl: string | null
    cardCount: number | null
    author: string | null
    llmBrand: string | null
    llmModel: string | null
    seriousnessLevel: number | null
    proficiencyLevel: string | null
    specificTopics: string | null
    rating: number | null
    ratingCount: number | null
    downloads: number | null
    publishedAt: Date | null
    updatedAt: Date | null
  }

  export type PublishedSetMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    imageUrl: string | null
    cardCount: number | null
    author: string | null
    llmBrand: string | null
    llmModel: string | null
    seriousnessLevel: number | null
    proficiencyLevel: string | null
    specificTopics: string | null
    rating: number | null
    ratingCount: number | null
    downloads: number | null
    publishedAt: Date | null
    updatedAt: Date | null
  }

  export type PublishedSetCountAggregateOutputType = {
    id: number
    title: number
    description: number
    imageUrl: number
    cardCount: number
    author: number
    llmBrand: number
    llmModel: number
    seriousnessLevel: number
    proficiencyLevel: number
    specificTopics: number
    phrases: number
    rating: number
    ratingCount: number
    downloads: number
    tags: number
    publishedAt: number
    updatedAt: number
    _all: number
  }


  export type PublishedSetAvgAggregateInputType = {
    cardCount?: true
    seriousnessLevel?: true
    rating?: true
    ratingCount?: true
    downloads?: true
  }

  export type PublishedSetSumAggregateInputType = {
    cardCount?: true
    seriousnessLevel?: true
    rating?: true
    ratingCount?: true
    downloads?: true
  }

  export type PublishedSetMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    imageUrl?: true
    cardCount?: true
    author?: true
    llmBrand?: true
    llmModel?: true
    seriousnessLevel?: true
    proficiencyLevel?: true
    specificTopics?: true
    rating?: true
    ratingCount?: true
    downloads?: true
    publishedAt?: true
    updatedAt?: true
  }

  export type PublishedSetMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    imageUrl?: true
    cardCount?: true
    author?: true
    llmBrand?: true
    llmModel?: true
    seriousnessLevel?: true
    proficiencyLevel?: true
    specificTopics?: true
    rating?: true
    ratingCount?: true
    downloads?: true
    publishedAt?: true
    updatedAt?: true
  }

  export type PublishedSetCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    imageUrl?: true
    cardCount?: true
    author?: true
    llmBrand?: true
    llmModel?: true
    seriousnessLevel?: true
    proficiencyLevel?: true
    specificTopics?: true
    phrases?: true
    rating?: true
    ratingCount?: true
    downloads?: true
    tags?: true
    publishedAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PublishedSetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PublishedSet to aggregate.
     */
    where?: PublishedSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PublishedSets to fetch.
     */
    orderBy?: PublishedSetOrderByWithRelationInput | PublishedSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PublishedSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PublishedSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PublishedSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PublishedSets
    **/
    _count?: true | PublishedSetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PublishedSetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PublishedSetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PublishedSetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PublishedSetMaxAggregateInputType
  }

  export type GetPublishedSetAggregateType<T extends PublishedSetAggregateArgs> = {
        [P in keyof T & keyof AggregatePublishedSet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePublishedSet[P]>
      : GetScalarType<T[P], AggregatePublishedSet[P]>
  }




  export type PublishedSetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PublishedSetWhereInput
    orderBy?: PublishedSetOrderByWithAggregationInput | PublishedSetOrderByWithAggregationInput[]
    by: PublishedSetScalarFieldEnum[] | PublishedSetScalarFieldEnum
    having?: PublishedSetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PublishedSetCountAggregateInputType | true
    _avg?: PublishedSetAvgAggregateInputType
    _sum?: PublishedSetSumAggregateInputType
    _min?: PublishedSetMinAggregateInputType
    _max?: PublishedSetMaxAggregateInputType
  }

  export type PublishedSetGroupByOutputType = {
    id: string
    title: string
    description: string | null
    imageUrl: string | null
    cardCount: number
    author: string
    llmBrand: string | null
    llmModel: string | null
    seriousnessLevel: number | null
    proficiencyLevel: string | null
    specificTopics: string | null
    phrases: JsonValue
    rating: number
    ratingCount: number
    downloads: number
    tags: string[]
    publishedAt: Date
    updatedAt: Date
    _count: PublishedSetCountAggregateOutputType | null
    _avg: PublishedSetAvgAggregateOutputType | null
    _sum: PublishedSetSumAggregateOutputType | null
    _min: PublishedSetMinAggregateOutputType | null
    _max: PublishedSetMaxAggregateOutputType | null
  }

  type GetPublishedSetGroupByPayload<T extends PublishedSetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PublishedSetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PublishedSetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PublishedSetGroupByOutputType[P]>
            : GetScalarType<T[P], PublishedSetGroupByOutputType[P]>
        }
      >
    >


  export type PublishedSetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    imageUrl?: boolean
    cardCount?: boolean
    author?: boolean
    llmBrand?: boolean
    llmModel?: boolean
    seriousnessLevel?: boolean
    proficiencyLevel?: boolean
    specificTopics?: boolean
    phrases?: boolean
    rating?: boolean
    ratingCount?: boolean
    downloads?: boolean
    tags?: boolean
    publishedAt?: boolean
    updatedAt?: boolean
    flashcardSets?: boolean | PublishedSet$flashcardSetsArgs<ExtArgs>
    _count?: boolean | PublishedSetCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["publishedSet"]>

  export type PublishedSetSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    imageUrl?: boolean
    cardCount?: boolean
    author?: boolean
    llmBrand?: boolean
    llmModel?: boolean
    seriousnessLevel?: boolean
    proficiencyLevel?: boolean
    specificTopics?: boolean
    phrases?: boolean
    rating?: boolean
    ratingCount?: boolean
    downloads?: boolean
    tags?: boolean
    publishedAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["publishedSet"]>

  export type PublishedSetSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    imageUrl?: boolean
    cardCount?: boolean
    author?: boolean
    llmBrand?: boolean
    llmModel?: boolean
    seriousnessLevel?: boolean
    proficiencyLevel?: boolean
    specificTopics?: boolean
    phrases?: boolean
    rating?: boolean
    ratingCount?: boolean
    downloads?: boolean
    tags?: boolean
    publishedAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["publishedSet"]>

  export type PublishedSetSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    imageUrl?: boolean
    cardCount?: boolean
    author?: boolean
    llmBrand?: boolean
    llmModel?: boolean
    seriousnessLevel?: boolean
    proficiencyLevel?: boolean
    specificTopics?: boolean
    phrases?: boolean
    rating?: boolean
    ratingCount?: boolean
    downloads?: boolean
    tags?: boolean
    publishedAt?: boolean
    updatedAt?: boolean
  }

  export type PublishedSetOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "imageUrl" | "cardCount" | "author" | "llmBrand" | "llmModel" | "seriousnessLevel" | "proficiencyLevel" | "specificTopics" | "phrases" | "rating" | "ratingCount" | "downloads" | "tags" | "publishedAt" | "updatedAt", ExtArgs["result"]["publishedSet"]>
  export type PublishedSetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    flashcardSets?: boolean | PublishedSet$flashcardSetsArgs<ExtArgs>
    _count?: boolean | PublishedSetCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PublishedSetIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PublishedSetIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PublishedSetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PublishedSet"
    objects: {
      flashcardSets: Prisma.$FlashcardSetPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      imageUrl: string | null
      cardCount: number
      author: string
      llmBrand: string | null
      llmModel: string | null
      seriousnessLevel: number | null
      proficiencyLevel: string | null
      specificTopics: string | null
      phrases: Prisma.JsonValue
      rating: number
      ratingCount: number
      downloads: number
      tags: string[]
      publishedAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["publishedSet"]>
    composites: {}
  }

  type PublishedSetGetPayload<S extends boolean | null | undefined | PublishedSetDefaultArgs> = $Result.GetResult<Prisma.$PublishedSetPayload, S>

  type PublishedSetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PublishedSetFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PublishedSetCountAggregateInputType | true
    }

  export interface PublishedSetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PublishedSet'], meta: { name: 'PublishedSet' } }
    /**
     * Find zero or one PublishedSet that matches the filter.
     * @param {PublishedSetFindUniqueArgs} args - Arguments to find a PublishedSet
     * @example
     * // Get one PublishedSet
     * const publishedSet = await prisma.publishedSet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PublishedSetFindUniqueArgs>(args: SelectSubset<T, PublishedSetFindUniqueArgs<ExtArgs>>): Prisma__PublishedSetClient<$Result.GetResult<Prisma.$PublishedSetPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PublishedSet that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PublishedSetFindUniqueOrThrowArgs} args - Arguments to find a PublishedSet
     * @example
     * // Get one PublishedSet
     * const publishedSet = await prisma.publishedSet.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PublishedSetFindUniqueOrThrowArgs>(args: SelectSubset<T, PublishedSetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PublishedSetClient<$Result.GetResult<Prisma.$PublishedSetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PublishedSet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublishedSetFindFirstArgs} args - Arguments to find a PublishedSet
     * @example
     * // Get one PublishedSet
     * const publishedSet = await prisma.publishedSet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PublishedSetFindFirstArgs>(args?: SelectSubset<T, PublishedSetFindFirstArgs<ExtArgs>>): Prisma__PublishedSetClient<$Result.GetResult<Prisma.$PublishedSetPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PublishedSet that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublishedSetFindFirstOrThrowArgs} args - Arguments to find a PublishedSet
     * @example
     * // Get one PublishedSet
     * const publishedSet = await prisma.publishedSet.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PublishedSetFindFirstOrThrowArgs>(args?: SelectSubset<T, PublishedSetFindFirstOrThrowArgs<ExtArgs>>): Prisma__PublishedSetClient<$Result.GetResult<Prisma.$PublishedSetPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PublishedSets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublishedSetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PublishedSets
     * const publishedSets = await prisma.publishedSet.findMany()
     * 
     * // Get first 10 PublishedSets
     * const publishedSets = await prisma.publishedSet.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const publishedSetWithIdOnly = await prisma.publishedSet.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PublishedSetFindManyArgs>(args?: SelectSubset<T, PublishedSetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PublishedSetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PublishedSet.
     * @param {PublishedSetCreateArgs} args - Arguments to create a PublishedSet.
     * @example
     * // Create one PublishedSet
     * const PublishedSet = await prisma.publishedSet.create({
     *   data: {
     *     // ... data to create a PublishedSet
     *   }
     * })
     * 
     */
    create<T extends PublishedSetCreateArgs>(args: SelectSubset<T, PublishedSetCreateArgs<ExtArgs>>): Prisma__PublishedSetClient<$Result.GetResult<Prisma.$PublishedSetPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PublishedSets.
     * @param {PublishedSetCreateManyArgs} args - Arguments to create many PublishedSets.
     * @example
     * // Create many PublishedSets
     * const publishedSet = await prisma.publishedSet.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PublishedSetCreateManyArgs>(args?: SelectSubset<T, PublishedSetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PublishedSets and returns the data saved in the database.
     * @param {PublishedSetCreateManyAndReturnArgs} args - Arguments to create many PublishedSets.
     * @example
     * // Create many PublishedSets
     * const publishedSet = await prisma.publishedSet.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PublishedSets and only return the `id`
     * const publishedSetWithIdOnly = await prisma.publishedSet.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PublishedSetCreateManyAndReturnArgs>(args?: SelectSubset<T, PublishedSetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PublishedSetPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PublishedSet.
     * @param {PublishedSetDeleteArgs} args - Arguments to delete one PublishedSet.
     * @example
     * // Delete one PublishedSet
     * const PublishedSet = await prisma.publishedSet.delete({
     *   where: {
     *     // ... filter to delete one PublishedSet
     *   }
     * })
     * 
     */
    delete<T extends PublishedSetDeleteArgs>(args: SelectSubset<T, PublishedSetDeleteArgs<ExtArgs>>): Prisma__PublishedSetClient<$Result.GetResult<Prisma.$PublishedSetPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PublishedSet.
     * @param {PublishedSetUpdateArgs} args - Arguments to update one PublishedSet.
     * @example
     * // Update one PublishedSet
     * const publishedSet = await prisma.publishedSet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PublishedSetUpdateArgs>(args: SelectSubset<T, PublishedSetUpdateArgs<ExtArgs>>): Prisma__PublishedSetClient<$Result.GetResult<Prisma.$PublishedSetPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PublishedSets.
     * @param {PublishedSetDeleteManyArgs} args - Arguments to filter PublishedSets to delete.
     * @example
     * // Delete a few PublishedSets
     * const { count } = await prisma.publishedSet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PublishedSetDeleteManyArgs>(args?: SelectSubset<T, PublishedSetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PublishedSets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublishedSetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PublishedSets
     * const publishedSet = await prisma.publishedSet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PublishedSetUpdateManyArgs>(args: SelectSubset<T, PublishedSetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PublishedSets and returns the data updated in the database.
     * @param {PublishedSetUpdateManyAndReturnArgs} args - Arguments to update many PublishedSets.
     * @example
     * // Update many PublishedSets
     * const publishedSet = await prisma.publishedSet.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PublishedSets and only return the `id`
     * const publishedSetWithIdOnly = await prisma.publishedSet.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PublishedSetUpdateManyAndReturnArgs>(args: SelectSubset<T, PublishedSetUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PublishedSetPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PublishedSet.
     * @param {PublishedSetUpsertArgs} args - Arguments to update or create a PublishedSet.
     * @example
     * // Update or create a PublishedSet
     * const publishedSet = await prisma.publishedSet.upsert({
     *   create: {
     *     // ... data to create a PublishedSet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PublishedSet we want to update
     *   }
     * })
     */
    upsert<T extends PublishedSetUpsertArgs>(args: SelectSubset<T, PublishedSetUpsertArgs<ExtArgs>>): Prisma__PublishedSetClient<$Result.GetResult<Prisma.$PublishedSetPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PublishedSets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublishedSetCountArgs} args - Arguments to filter PublishedSets to count.
     * @example
     * // Count the number of PublishedSets
     * const count = await prisma.publishedSet.count({
     *   where: {
     *     // ... the filter for the PublishedSets we want to count
     *   }
     * })
    **/
    count<T extends PublishedSetCountArgs>(
      args?: Subset<T, PublishedSetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PublishedSetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PublishedSet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublishedSetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PublishedSetAggregateArgs>(args: Subset<T, PublishedSetAggregateArgs>): Prisma.PrismaPromise<GetPublishedSetAggregateType<T>>

    /**
     * Group by PublishedSet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublishedSetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PublishedSetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PublishedSetGroupByArgs['orderBy'] }
        : { orderBy?: PublishedSetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PublishedSetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPublishedSetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PublishedSet model
   */
  readonly fields: PublishedSetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PublishedSet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PublishedSetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    flashcardSets<T extends PublishedSet$flashcardSetsArgs<ExtArgs> = {}>(args?: Subset<T, PublishedSet$flashcardSetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlashcardSetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PublishedSet model
   */
  interface PublishedSetFieldRefs {
    readonly id: FieldRef<"PublishedSet", 'String'>
    readonly title: FieldRef<"PublishedSet", 'String'>
    readonly description: FieldRef<"PublishedSet", 'String'>
    readonly imageUrl: FieldRef<"PublishedSet", 'String'>
    readonly cardCount: FieldRef<"PublishedSet", 'Int'>
    readonly author: FieldRef<"PublishedSet", 'String'>
    readonly llmBrand: FieldRef<"PublishedSet", 'String'>
    readonly llmModel: FieldRef<"PublishedSet", 'String'>
    readonly seriousnessLevel: FieldRef<"PublishedSet", 'Int'>
    readonly proficiencyLevel: FieldRef<"PublishedSet", 'String'>
    readonly specificTopics: FieldRef<"PublishedSet", 'String'>
    readonly phrases: FieldRef<"PublishedSet", 'Json'>
    readonly rating: FieldRef<"PublishedSet", 'Float'>
    readonly ratingCount: FieldRef<"PublishedSet", 'Int'>
    readonly downloads: FieldRef<"PublishedSet", 'Int'>
    readonly tags: FieldRef<"PublishedSet", 'String[]'>
    readonly publishedAt: FieldRef<"PublishedSet", 'DateTime'>
    readonly updatedAt: FieldRef<"PublishedSet", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PublishedSet findUnique
   */
  export type PublishedSetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublishedSet
     */
    select?: PublishedSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PublishedSet
     */
    omit?: PublishedSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublishedSetInclude<ExtArgs> | null
    /**
     * Filter, which PublishedSet to fetch.
     */
    where: PublishedSetWhereUniqueInput
  }

  /**
   * PublishedSet findUniqueOrThrow
   */
  export type PublishedSetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublishedSet
     */
    select?: PublishedSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PublishedSet
     */
    omit?: PublishedSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublishedSetInclude<ExtArgs> | null
    /**
     * Filter, which PublishedSet to fetch.
     */
    where: PublishedSetWhereUniqueInput
  }

  /**
   * PublishedSet findFirst
   */
  export type PublishedSetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublishedSet
     */
    select?: PublishedSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PublishedSet
     */
    omit?: PublishedSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublishedSetInclude<ExtArgs> | null
    /**
     * Filter, which PublishedSet to fetch.
     */
    where?: PublishedSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PublishedSets to fetch.
     */
    orderBy?: PublishedSetOrderByWithRelationInput | PublishedSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PublishedSets.
     */
    cursor?: PublishedSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PublishedSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PublishedSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PublishedSets.
     */
    distinct?: PublishedSetScalarFieldEnum | PublishedSetScalarFieldEnum[]
  }

  /**
   * PublishedSet findFirstOrThrow
   */
  export type PublishedSetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublishedSet
     */
    select?: PublishedSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PublishedSet
     */
    omit?: PublishedSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublishedSetInclude<ExtArgs> | null
    /**
     * Filter, which PublishedSet to fetch.
     */
    where?: PublishedSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PublishedSets to fetch.
     */
    orderBy?: PublishedSetOrderByWithRelationInput | PublishedSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PublishedSets.
     */
    cursor?: PublishedSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PublishedSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PublishedSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PublishedSets.
     */
    distinct?: PublishedSetScalarFieldEnum | PublishedSetScalarFieldEnum[]
  }

  /**
   * PublishedSet findMany
   */
  export type PublishedSetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublishedSet
     */
    select?: PublishedSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PublishedSet
     */
    omit?: PublishedSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublishedSetInclude<ExtArgs> | null
    /**
     * Filter, which PublishedSets to fetch.
     */
    where?: PublishedSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PublishedSets to fetch.
     */
    orderBy?: PublishedSetOrderByWithRelationInput | PublishedSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PublishedSets.
     */
    cursor?: PublishedSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PublishedSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PublishedSets.
     */
    skip?: number
    distinct?: PublishedSetScalarFieldEnum | PublishedSetScalarFieldEnum[]
  }

  /**
   * PublishedSet create
   */
  export type PublishedSetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublishedSet
     */
    select?: PublishedSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PublishedSet
     */
    omit?: PublishedSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublishedSetInclude<ExtArgs> | null
    /**
     * The data needed to create a PublishedSet.
     */
    data: XOR<PublishedSetCreateInput, PublishedSetUncheckedCreateInput>
  }

  /**
   * PublishedSet createMany
   */
  export type PublishedSetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PublishedSets.
     */
    data: PublishedSetCreateManyInput | PublishedSetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PublishedSet createManyAndReturn
   */
  export type PublishedSetCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublishedSet
     */
    select?: PublishedSetSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PublishedSet
     */
    omit?: PublishedSetOmit<ExtArgs> | null
    /**
     * The data used to create many PublishedSets.
     */
    data: PublishedSetCreateManyInput | PublishedSetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PublishedSet update
   */
  export type PublishedSetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublishedSet
     */
    select?: PublishedSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PublishedSet
     */
    omit?: PublishedSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublishedSetInclude<ExtArgs> | null
    /**
     * The data needed to update a PublishedSet.
     */
    data: XOR<PublishedSetUpdateInput, PublishedSetUncheckedUpdateInput>
    /**
     * Choose, which PublishedSet to update.
     */
    where: PublishedSetWhereUniqueInput
  }

  /**
   * PublishedSet updateMany
   */
  export type PublishedSetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PublishedSets.
     */
    data: XOR<PublishedSetUpdateManyMutationInput, PublishedSetUncheckedUpdateManyInput>
    /**
     * Filter which PublishedSets to update
     */
    where?: PublishedSetWhereInput
    /**
     * Limit how many PublishedSets to update.
     */
    limit?: number
  }

  /**
   * PublishedSet updateManyAndReturn
   */
  export type PublishedSetUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublishedSet
     */
    select?: PublishedSetSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PublishedSet
     */
    omit?: PublishedSetOmit<ExtArgs> | null
    /**
     * The data used to update PublishedSets.
     */
    data: XOR<PublishedSetUpdateManyMutationInput, PublishedSetUncheckedUpdateManyInput>
    /**
     * Filter which PublishedSets to update
     */
    where?: PublishedSetWhereInput
    /**
     * Limit how many PublishedSets to update.
     */
    limit?: number
  }

  /**
   * PublishedSet upsert
   */
  export type PublishedSetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublishedSet
     */
    select?: PublishedSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PublishedSet
     */
    omit?: PublishedSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublishedSetInclude<ExtArgs> | null
    /**
     * The filter to search for the PublishedSet to update in case it exists.
     */
    where: PublishedSetWhereUniqueInput
    /**
     * In case the PublishedSet found by the `where` argument doesn't exist, create a new PublishedSet with this data.
     */
    create: XOR<PublishedSetCreateInput, PublishedSetUncheckedCreateInput>
    /**
     * In case the PublishedSet was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PublishedSetUpdateInput, PublishedSetUncheckedUpdateInput>
  }

  /**
   * PublishedSet delete
   */
  export type PublishedSetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublishedSet
     */
    select?: PublishedSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PublishedSet
     */
    omit?: PublishedSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublishedSetInclude<ExtArgs> | null
    /**
     * Filter which PublishedSet to delete.
     */
    where: PublishedSetWhereUniqueInput
  }

  /**
   * PublishedSet deleteMany
   */
  export type PublishedSetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PublishedSets to delete
     */
    where?: PublishedSetWhereInput
    /**
     * Limit how many PublishedSets to delete.
     */
    limit?: number
  }

  /**
   * PublishedSet.flashcardSets
   */
  export type PublishedSet$flashcardSetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlashcardSet
     */
    select?: FlashcardSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlashcardSet
     */
    omit?: FlashcardSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlashcardSetInclude<ExtArgs> | null
    where?: FlashcardSetWhereInput
    orderBy?: FlashcardSetOrderByWithRelationInput | FlashcardSetOrderByWithRelationInput[]
    cursor?: FlashcardSetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FlashcardSetScalarFieldEnum | FlashcardSetScalarFieldEnum[]
  }

  /**
   * PublishedSet without action
   */
  export type PublishedSetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublishedSet
     */
    select?: PublishedSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PublishedSet
     */
    omit?: PublishedSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublishedSetInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    emailVerified: 'emailVerified',
    image: 'image',
    defaultLanguage: 'defaultLanguage',
    preferredVoice: 'preferredVoice',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const FlashcardSetScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    name: 'name',
    description: 'description',
    cleverTitle: 'cleverTitle',
    level: 'level',
    goals: 'goals',
    specificTopics: 'specificTopics',
    source: 'source',
    imageUrl: 'imageUrl',
    seriousnessLevel: 'seriousnessLevel',
    toneLevel: 'toneLevel',
    llmBrand: 'llmBrand',
    llmModel: 'llmModel',
    promptTemplate: 'promptTemplate',
    shareId: 'shareId',
    isPublished: 'isPublished',
    publishedSetId: 'publishedSetId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FlashcardSetScalarFieldEnum = (typeof FlashcardSetScalarFieldEnum)[keyof typeof FlashcardSetScalarFieldEnum]


  export const PhraseScalarFieldEnum: {
    id: 'id',
    setId: 'setId',
    english: 'english',
    thai: 'thai',
    thaiMasculine: 'thaiMasculine',
    thaiFeminine: 'thaiFeminine',
    pronunciation: 'pronunciation',
    mnemonic: 'mnemonic',
    examplesJson: 'examplesJson',
    difficulty: 'difficulty',
    tags: 'tags',
    audioUrl: 'audioUrl'
  };

  export type PhraseScalarFieldEnum = (typeof PhraseScalarFieldEnum)[keyof typeof PhraseScalarFieldEnum]


  export const UserSetProgressScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    setId: 'setId',
    progressData: 'progressData',
    lastAccessedAt: 'lastAccessedAt',
    streak: 'streak',
    bestStreak: 'bestStreak',
    totalReviews: 'totalReviews'
  };

  export type UserSetProgressScalarFieldEnum = (typeof UserSetProgressScalarFieldEnum)[keyof typeof UserSetProgressScalarFieldEnum]


  export const PublishedSetScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    imageUrl: 'imageUrl',
    cardCount: 'cardCount',
    author: 'author',
    llmBrand: 'llmBrand',
    llmModel: 'llmModel',
    seriousnessLevel: 'seriousnessLevel',
    proficiencyLevel: 'proficiencyLevel',
    specificTopics: 'specificTopics',
    phrases: 'phrases',
    rating: 'rating',
    ratingCount: 'ratingCount',
    downloads: 'downloads',
    tags: 'tags',
    publishedAt: 'publishedAt',
    updatedAt: 'updatedAt'
  };

  export type PublishedSetScalarFieldEnum = (typeof PublishedSetScalarFieldEnum)[keyof typeof PublishedSetScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    email?: StringNullableFilter<"User"> | string | null
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    image?: StringNullableFilter<"User"> | string | null
    defaultLanguage?: StringFilter<"User"> | string
    preferredVoice?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    flashcardSets?: FlashcardSetListRelationFilter
    progress?: UserSetProgressListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    emailVerified?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    defaultLanguage?: SortOrder
    preferredVoice?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    flashcardSets?: FlashcardSetOrderByRelationAggregateInput
    progress?: UserSetProgressOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    image?: StringNullableFilter<"User"> | string | null
    defaultLanguage?: StringFilter<"User"> | string
    preferredVoice?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    flashcardSets?: FlashcardSetListRelationFilter
    progress?: UserSetProgressListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    emailVerified?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    defaultLanguage?: SortOrder
    preferredVoice?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    email?: StringNullableWithAggregatesFilter<"User"> | string | null
    emailVerified?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
    defaultLanguage?: StringWithAggregatesFilter<"User"> | string
    preferredVoice?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type FlashcardSetWhereInput = {
    AND?: FlashcardSetWhereInput | FlashcardSetWhereInput[]
    OR?: FlashcardSetWhereInput[]
    NOT?: FlashcardSetWhereInput | FlashcardSetWhereInput[]
    id?: StringFilter<"FlashcardSet"> | string
    userId?: StringFilter<"FlashcardSet"> | string
    name?: StringFilter<"FlashcardSet"> | string
    description?: StringNullableFilter<"FlashcardSet"> | string | null
    cleverTitle?: StringNullableFilter<"FlashcardSet"> | string | null
    level?: StringNullableFilter<"FlashcardSet"> | string | null
    goals?: StringNullableListFilter<"FlashcardSet">
    specificTopics?: StringNullableFilter<"FlashcardSet"> | string | null
    source?: StringFilter<"FlashcardSet"> | string
    imageUrl?: StringNullableFilter<"FlashcardSet"> | string | null
    seriousnessLevel?: IntNullableFilter<"FlashcardSet"> | number | null
    toneLevel?: IntNullableFilter<"FlashcardSet"> | number | null
    llmBrand?: StringNullableFilter<"FlashcardSet"> | string | null
    llmModel?: StringNullableFilter<"FlashcardSet"> | string | null
    promptTemplate?: StringNullableFilter<"FlashcardSet"> | string | null
    shareId?: StringNullableFilter<"FlashcardSet"> | string | null
    isPublished?: BoolFilter<"FlashcardSet"> | boolean
    publishedSetId?: StringNullableFilter<"FlashcardSet"> | string | null
    createdAt?: DateTimeFilter<"FlashcardSet"> | Date | string
    updatedAt?: DateTimeFilter<"FlashcardSet"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    phrases?: PhraseListRelationFilter
    progress?: UserSetProgressListRelationFilter
    publishedSet?: XOR<PublishedSetNullableScalarRelationFilter, PublishedSetWhereInput> | null
  }

  export type FlashcardSetOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    cleverTitle?: SortOrderInput | SortOrder
    level?: SortOrderInput | SortOrder
    goals?: SortOrder
    specificTopics?: SortOrderInput | SortOrder
    source?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    seriousnessLevel?: SortOrderInput | SortOrder
    toneLevel?: SortOrderInput | SortOrder
    llmBrand?: SortOrderInput | SortOrder
    llmModel?: SortOrderInput | SortOrder
    promptTemplate?: SortOrderInput | SortOrder
    shareId?: SortOrderInput | SortOrder
    isPublished?: SortOrder
    publishedSetId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    phrases?: PhraseOrderByRelationAggregateInput
    progress?: UserSetProgressOrderByRelationAggregateInput
    publishedSet?: PublishedSetOrderByWithRelationInput
  }

  export type FlashcardSetWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    shareId?: string
    AND?: FlashcardSetWhereInput | FlashcardSetWhereInput[]
    OR?: FlashcardSetWhereInput[]
    NOT?: FlashcardSetWhereInput | FlashcardSetWhereInput[]
    userId?: StringFilter<"FlashcardSet"> | string
    name?: StringFilter<"FlashcardSet"> | string
    description?: StringNullableFilter<"FlashcardSet"> | string | null
    cleverTitle?: StringNullableFilter<"FlashcardSet"> | string | null
    level?: StringNullableFilter<"FlashcardSet"> | string | null
    goals?: StringNullableListFilter<"FlashcardSet">
    specificTopics?: StringNullableFilter<"FlashcardSet"> | string | null
    source?: StringFilter<"FlashcardSet"> | string
    imageUrl?: StringNullableFilter<"FlashcardSet"> | string | null
    seriousnessLevel?: IntNullableFilter<"FlashcardSet"> | number | null
    toneLevel?: IntNullableFilter<"FlashcardSet"> | number | null
    llmBrand?: StringNullableFilter<"FlashcardSet"> | string | null
    llmModel?: StringNullableFilter<"FlashcardSet"> | string | null
    promptTemplate?: StringNullableFilter<"FlashcardSet"> | string | null
    isPublished?: BoolFilter<"FlashcardSet"> | boolean
    publishedSetId?: StringNullableFilter<"FlashcardSet"> | string | null
    createdAt?: DateTimeFilter<"FlashcardSet"> | Date | string
    updatedAt?: DateTimeFilter<"FlashcardSet"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    phrases?: PhraseListRelationFilter
    progress?: UserSetProgressListRelationFilter
    publishedSet?: XOR<PublishedSetNullableScalarRelationFilter, PublishedSetWhereInput> | null
  }, "id" | "shareId">

  export type FlashcardSetOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    cleverTitle?: SortOrderInput | SortOrder
    level?: SortOrderInput | SortOrder
    goals?: SortOrder
    specificTopics?: SortOrderInput | SortOrder
    source?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    seriousnessLevel?: SortOrderInput | SortOrder
    toneLevel?: SortOrderInput | SortOrder
    llmBrand?: SortOrderInput | SortOrder
    llmModel?: SortOrderInput | SortOrder
    promptTemplate?: SortOrderInput | SortOrder
    shareId?: SortOrderInput | SortOrder
    isPublished?: SortOrder
    publishedSetId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FlashcardSetCountOrderByAggregateInput
    _avg?: FlashcardSetAvgOrderByAggregateInput
    _max?: FlashcardSetMaxOrderByAggregateInput
    _min?: FlashcardSetMinOrderByAggregateInput
    _sum?: FlashcardSetSumOrderByAggregateInput
  }

  export type FlashcardSetScalarWhereWithAggregatesInput = {
    AND?: FlashcardSetScalarWhereWithAggregatesInput | FlashcardSetScalarWhereWithAggregatesInput[]
    OR?: FlashcardSetScalarWhereWithAggregatesInput[]
    NOT?: FlashcardSetScalarWhereWithAggregatesInput | FlashcardSetScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FlashcardSet"> | string
    userId?: StringWithAggregatesFilter<"FlashcardSet"> | string
    name?: StringWithAggregatesFilter<"FlashcardSet"> | string
    description?: StringNullableWithAggregatesFilter<"FlashcardSet"> | string | null
    cleverTitle?: StringNullableWithAggregatesFilter<"FlashcardSet"> | string | null
    level?: StringNullableWithAggregatesFilter<"FlashcardSet"> | string | null
    goals?: StringNullableListFilter<"FlashcardSet">
    specificTopics?: StringNullableWithAggregatesFilter<"FlashcardSet"> | string | null
    source?: StringWithAggregatesFilter<"FlashcardSet"> | string
    imageUrl?: StringNullableWithAggregatesFilter<"FlashcardSet"> | string | null
    seriousnessLevel?: IntNullableWithAggregatesFilter<"FlashcardSet"> | number | null
    toneLevel?: IntNullableWithAggregatesFilter<"FlashcardSet"> | number | null
    llmBrand?: StringNullableWithAggregatesFilter<"FlashcardSet"> | string | null
    llmModel?: StringNullableWithAggregatesFilter<"FlashcardSet"> | string | null
    promptTemplate?: StringNullableWithAggregatesFilter<"FlashcardSet"> | string | null
    shareId?: StringNullableWithAggregatesFilter<"FlashcardSet"> | string | null
    isPublished?: BoolWithAggregatesFilter<"FlashcardSet"> | boolean
    publishedSetId?: StringNullableWithAggregatesFilter<"FlashcardSet"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"FlashcardSet"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FlashcardSet"> | Date | string
  }

  export type PhraseWhereInput = {
    AND?: PhraseWhereInput | PhraseWhereInput[]
    OR?: PhraseWhereInput[]
    NOT?: PhraseWhereInput | PhraseWhereInput[]
    id?: StringFilter<"Phrase"> | string
    setId?: StringFilter<"Phrase"> | string
    english?: StringFilter<"Phrase"> | string
    thai?: StringFilter<"Phrase"> | string
    thaiMasculine?: StringFilter<"Phrase"> | string
    thaiFeminine?: StringFilter<"Phrase"> | string
    pronunciation?: StringFilter<"Phrase"> | string
    mnemonic?: StringNullableFilter<"Phrase"> | string | null
    examplesJson?: JsonNullableFilter<"Phrase">
    difficulty?: IntFilter<"Phrase"> | number
    tags?: StringNullableListFilter<"Phrase">
    audioUrl?: StringNullableFilter<"Phrase"> | string | null
    flashcardSet?: XOR<FlashcardSetScalarRelationFilter, FlashcardSetWhereInput>
  }

  export type PhraseOrderByWithRelationInput = {
    id?: SortOrder
    setId?: SortOrder
    english?: SortOrder
    thai?: SortOrder
    thaiMasculine?: SortOrder
    thaiFeminine?: SortOrder
    pronunciation?: SortOrder
    mnemonic?: SortOrderInput | SortOrder
    examplesJson?: SortOrderInput | SortOrder
    difficulty?: SortOrder
    tags?: SortOrder
    audioUrl?: SortOrderInput | SortOrder
    flashcardSet?: FlashcardSetOrderByWithRelationInput
  }

  export type PhraseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PhraseWhereInput | PhraseWhereInput[]
    OR?: PhraseWhereInput[]
    NOT?: PhraseWhereInput | PhraseWhereInput[]
    setId?: StringFilter<"Phrase"> | string
    english?: StringFilter<"Phrase"> | string
    thai?: StringFilter<"Phrase"> | string
    thaiMasculine?: StringFilter<"Phrase"> | string
    thaiFeminine?: StringFilter<"Phrase"> | string
    pronunciation?: StringFilter<"Phrase"> | string
    mnemonic?: StringNullableFilter<"Phrase"> | string | null
    examplesJson?: JsonNullableFilter<"Phrase">
    difficulty?: IntFilter<"Phrase"> | number
    tags?: StringNullableListFilter<"Phrase">
    audioUrl?: StringNullableFilter<"Phrase"> | string | null
    flashcardSet?: XOR<FlashcardSetScalarRelationFilter, FlashcardSetWhereInput>
  }, "id">

  export type PhraseOrderByWithAggregationInput = {
    id?: SortOrder
    setId?: SortOrder
    english?: SortOrder
    thai?: SortOrder
    thaiMasculine?: SortOrder
    thaiFeminine?: SortOrder
    pronunciation?: SortOrder
    mnemonic?: SortOrderInput | SortOrder
    examplesJson?: SortOrderInput | SortOrder
    difficulty?: SortOrder
    tags?: SortOrder
    audioUrl?: SortOrderInput | SortOrder
    _count?: PhraseCountOrderByAggregateInput
    _avg?: PhraseAvgOrderByAggregateInput
    _max?: PhraseMaxOrderByAggregateInput
    _min?: PhraseMinOrderByAggregateInput
    _sum?: PhraseSumOrderByAggregateInput
  }

  export type PhraseScalarWhereWithAggregatesInput = {
    AND?: PhraseScalarWhereWithAggregatesInput | PhraseScalarWhereWithAggregatesInput[]
    OR?: PhraseScalarWhereWithAggregatesInput[]
    NOT?: PhraseScalarWhereWithAggregatesInput | PhraseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Phrase"> | string
    setId?: StringWithAggregatesFilter<"Phrase"> | string
    english?: StringWithAggregatesFilter<"Phrase"> | string
    thai?: StringWithAggregatesFilter<"Phrase"> | string
    thaiMasculine?: StringWithAggregatesFilter<"Phrase"> | string
    thaiFeminine?: StringWithAggregatesFilter<"Phrase"> | string
    pronunciation?: StringWithAggregatesFilter<"Phrase"> | string
    mnemonic?: StringNullableWithAggregatesFilter<"Phrase"> | string | null
    examplesJson?: JsonNullableWithAggregatesFilter<"Phrase">
    difficulty?: IntWithAggregatesFilter<"Phrase"> | number
    tags?: StringNullableListFilter<"Phrase">
    audioUrl?: StringNullableWithAggregatesFilter<"Phrase"> | string | null
  }

  export type UserSetProgressWhereInput = {
    AND?: UserSetProgressWhereInput | UserSetProgressWhereInput[]
    OR?: UserSetProgressWhereInput[]
    NOT?: UserSetProgressWhereInput | UserSetProgressWhereInput[]
    id?: StringFilter<"UserSetProgress"> | string
    userId?: StringFilter<"UserSetProgress"> | string
    setId?: StringFilter<"UserSetProgress"> | string
    progressData?: JsonFilter<"UserSetProgress">
    lastAccessedAt?: DateTimeFilter<"UserSetProgress"> | Date | string
    streak?: IntFilter<"UserSetProgress"> | number
    bestStreak?: IntFilter<"UserSetProgress"> | number
    totalReviews?: IntFilter<"UserSetProgress"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    set?: XOR<FlashcardSetScalarRelationFilter, FlashcardSetWhereInput>
  }

  export type UserSetProgressOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    setId?: SortOrder
    progressData?: SortOrder
    lastAccessedAt?: SortOrder
    streak?: SortOrder
    bestStreak?: SortOrder
    totalReviews?: SortOrder
    user?: UserOrderByWithRelationInput
    set?: FlashcardSetOrderByWithRelationInput
  }

  export type UserSetProgressWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_setId?: UserSetProgressUserIdSetIdCompoundUniqueInput
    AND?: UserSetProgressWhereInput | UserSetProgressWhereInput[]
    OR?: UserSetProgressWhereInput[]
    NOT?: UserSetProgressWhereInput | UserSetProgressWhereInput[]
    userId?: StringFilter<"UserSetProgress"> | string
    setId?: StringFilter<"UserSetProgress"> | string
    progressData?: JsonFilter<"UserSetProgress">
    lastAccessedAt?: DateTimeFilter<"UserSetProgress"> | Date | string
    streak?: IntFilter<"UserSetProgress"> | number
    bestStreak?: IntFilter<"UserSetProgress"> | number
    totalReviews?: IntFilter<"UserSetProgress"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    set?: XOR<FlashcardSetScalarRelationFilter, FlashcardSetWhereInput>
  }, "id" | "userId_setId">

  export type UserSetProgressOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    setId?: SortOrder
    progressData?: SortOrder
    lastAccessedAt?: SortOrder
    streak?: SortOrder
    bestStreak?: SortOrder
    totalReviews?: SortOrder
    _count?: UserSetProgressCountOrderByAggregateInput
    _avg?: UserSetProgressAvgOrderByAggregateInput
    _max?: UserSetProgressMaxOrderByAggregateInput
    _min?: UserSetProgressMinOrderByAggregateInput
    _sum?: UserSetProgressSumOrderByAggregateInput
  }

  export type UserSetProgressScalarWhereWithAggregatesInput = {
    AND?: UserSetProgressScalarWhereWithAggregatesInput | UserSetProgressScalarWhereWithAggregatesInput[]
    OR?: UserSetProgressScalarWhereWithAggregatesInput[]
    NOT?: UserSetProgressScalarWhereWithAggregatesInput | UserSetProgressScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserSetProgress"> | string
    userId?: StringWithAggregatesFilter<"UserSetProgress"> | string
    setId?: StringWithAggregatesFilter<"UserSetProgress"> | string
    progressData?: JsonWithAggregatesFilter<"UserSetProgress">
    lastAccessedAt?: DateTimeWithAggregatesFilter<"UserSetProgress"> | Date | string
    streak?: IntWithAggregatesFilter<"UserSetProgress"> | number
    bestStreak?: IntWithAggregatesFilter<"UserSetProgress"> | number
    totalReviews?: IntWithAggregatesFilter<"UserSetProgress"> | number
  }

  export type PublishedSetWhereInput = {
    AND?: PublishedSetWhereInput | PublishedSetWhereInput[]
    OR?: PublishedSetWhereInput[]
    NOT?: PublishedSetWhereInput | PublishedSetWhereInput[]
    id?: StringFilter<"PublishedSet"> | string
    title?: StringFilter<"PublishedSet"> | string
    description?: StringNullableFilter<"PublishedSet"> | string | null
    imageUrl?: StringNullableFilter<"PublishedSet"> | string | null
    cardCount?: IntFilter<"PublishedSet"> | number
    author?: StringFilter<"PublishedSet"> | string
    llmBrand?: StringNullableFilter<"PublishedSet"> | string | null
    llmModel?: StringNullableFilter<"PublishedSet"> | string | null
    seriousnessLevel?: IntNullableFilter<"PublishedSet"> | number | null
    proficiencyLevel?: StringNullableFilter<"PublishedSet"> | string | null
    specificTopics?: StringNullableFilter<"PublishedSet"> | string | null
    phrases?: JsonFilter<"PublishedSet">
    rating?: FloatFilter<"PublishedSet"> | number
    ratingCount?: IntFilter<"PublishedSet"> | number
    downloads?: IntFilter<"PublishedSet"> | number
    tags?: StringNullableListFilter<"PublishedSet">
    publishedAt?: DateTimeFilter<"PublishedSet"> | Date | string
    updatedAt?: DateTimeFilter<"PublishedSet"> | Date | string
    flashcardSets?: FlashcardSetListRelationFilter
  }

  export type PublishedSetOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    cardCount?: SortOrder
    author?: SortOrder
    llmBrand?: SortOrderInput | SortOrder
    llmModel?: SortOrderInput | SortOrder
    seriousnessLevel?: SortOrderInput | SortOrder
    proficiencyLevel?: SortOrderInput | SortOrder
    specificTopics?: SortOrderInput | SortOrder
    phrases?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
    downloads?: SortOrder
    tags?: SortOrder
    publishedAt?: SortOrder
    updatedAt?: SortOrder
    flashcardSets?: FlashcardSetOrderByRelationAggregateInput
  }

  export type PublishedSetWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PublishedSetWhereInput | PublishedSetWhereInput[]
    OR?: PublishedSetWhereInput[]
    NOT?: PublishedSetWhereInput | PublishedSetWhereInput[]
    title?: StringFilter<"PublishedSet"> | string
    description?: StringNullableFilter<"PublishedSet"> | string | null
    imageUrl?: StringNullableFilter<"PublishedSet"> | string | null
    cardCount?: IntFilter<"PublishedSet"> | number
    author?: StringFilter<"PublishedSet"> | string
    llmBrand?: StringNullableFilter<"PublishedSet"> | string | null
    llmModel?: StringNullableFilter<"PublishedSet"> | string | null
    seriousnessLevel?: IntNullableFilter<"PublishedSet"> | number | null
    proficiencyLevel?: StringNullableFilter<"PublishedSet"> | string | null
    specificTopics?: StringNullableFilter<"PublishedSet"> | string | null
    phrases?: JsonFilter<"PublishedSet">
    rating?: FloatFilter<"PublishedSet"> | number
    ratingCount?: IntFilter<"PublishedSet"> | number
    downloads?: IntFilter<"PublishedSet"> | number
    tags?: StringNullableListFilter<"PublishedSet">
    publishedAt?: DateTimeFilter<"PublishedSet"> | Date | string
    updatedAt?: DateTimeFilter<"PublishedSet"> | Date | string
    flashcardSets?: FlashcardSetListRelationFilter
  }, "id">

  export type PublishedSetOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    cardCount?: SortOrder
    author?: SortOrder
    llmBrand?: SortOrderInput | SortOrder
    llmModel?: SortOrderInput | SortOrder
    seriousnessLevel?: SortOrderInput | SortOrder
    proficiencyLevel?: SortOrderInput | SortOrder
    specificTopics?: SortOrderInput | SortOrder
    phrases?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
    downloads?: SortOrder
    tags?: SortOrder
    publishedAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PublishedSetCountOrderByAggregateInput
    _avg?: PublishedSetAvgOrderByAggregateInput
    _max?: PublishedSetMaxOrderByAggregateInput
    _min?: PublishedSetMinOrderByAggregateInput
    _sum?: PublishedSetSumOrderByAggregateInput
  }

  export type PublishedSetScalarWhereWithAggregatesInput = {
    AND?: PublishedSetScalarWhereWithAggregatesInput | PublishedSetScalarWhereWithAggregatesInput[]
    OR?: PublishedSetScalarWhereWithAggregatesInput[]
    NOT?: PublishedSetScalarWhereWithAggregatesInput | PublishedSetScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PublishedSet"> | string
    title?: StringWithAggregatesFilter<"PublishedSet"> | string
    description?: StringNullableWithAggregatesFilter<"PublishedSet"> | string | null
    imageUrl?: StringNullableWithAggregatesFilter<"PublishedSet"> | string | null
    cardCount?: IntWithAggregatesFilter<"PublishedSet"> | number
    author?: StringWithAggregatesFilter<"PublishedSet"> | string
    llmBrand?: StringNullableWithAggregatesFilter<"PublishedSet"> | string | null
    llmModel?: StringNullableWithAggregatesFilter<"PublishedSet"> | string | null
    seriousnessLevel?: IntNullableWithAggregatesFilter<"PublishedSet"> | number | null
    proficiencyLevel?: StringNullableWithAggregatesFilter<"PublishedSet"> | string | null
    specificTopics?: StringNullableWithAggregatesFilter<"PublishedSet"> | string | null
    phrases?: JsonWithAggregatesFilter<"PublishedSet">
    rating?: FloatWithAggregatesFilter<"PublishedSet"> | number
    ratingCount?: IntWithAggregatesFilter<"PublishedSet"> | number
    downloads?: IntWithAggregatesFilter<"PublishedSet"> | number
    tags?: StringNullableListFilter<"PublishedSet">
    publishedAt?: DateTimeWithAggregatesFilter<"PublishedSet"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PublishedSet"> | Date | string
  }

  export type UserCreateInput = {
    id: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    defaultLanguage?: string
    preferredVoice?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    flashcardSets?: FlashcardSetCreateNestedManyWithoutUserInput
    progress?: UserSetProgressCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    defaultLanguage?: string
    preferredVoice?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    flashcardSets?: FlashcardSetUncheckedCreateNestedManyWithoutUserInput
    progress?: UserSetProgressUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    defaultLanguage?: StringFieldUpdateOperationsInput | string
    preferredVoice?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    flashcardSets?: FlashcardSetUpdateManyWithoutUserNestedInput
    progress?: UserSetProgressUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    defaultLanguage?: StringFieldUpdateOperationsInput | string
    preferredVoice?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    flashcardSets?: FlashcardSetUncheckedUpdateManyWithoutUserNestedInput
    progress?: UserSetProgressUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    defaultLanguage?: string
    preferredVoice?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    defaultLanguage?: StringFieldUpdateOperationsInput | string
    preferredVoice?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    defaultLanguage?: StringFieldUpdateOperationsInput | string
    preferredVoice?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FlashcardSetCreateInput = {
    id?: string
    name: string
    description?: string | null
    cleverTitle?: string | null
    level?: string | null
    goals?: FlashcardSetCreategoalsInput | string[]
    specificTopics?: string | null
    source: string
    imageUrl?: string | null
    seriousnessLevel?: number | null
    toneLevel?: number | null
    llmBrand?: string | null
    llmModel?: string | null
    promptTemplate?: string | null
    shareId?: string | null
    isPublished?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutFlashcardSetsInput
    phrases?: PhraseCreateNestedManyWithoutFlashcardSetInput
    progress?: UserSetProgressCreateNestedManyWithoutSetInput
    publishedSet?: PublishedSetCreateNestedOneWithoutFlashcardSetsInput
  }

  export type FlashcardSetUncheckedCreateInput = {
    id?: string
    userId: string
    name: string
    description?: string | null
    cleverTitle?: string | null
    level?: string | null
    goals?: FlashcardSetCreategoalsInput | string[]
    specificTopics?: string | null
    source: string
    imageUrl?: string | null
    seriousnessLevel?: number | null
    toneLevel?: number | null
    llmBrand?: string | null
    llmModel?: string | null
    promptTemplate?: string | null
    shareId?: string | null
    isPublished?: boolean
    publishedSetId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    phrases?: PhraseUncheckedCreateNestedManyWithoutFlashcardSetInput
    progress?: UserSetProgressUncheckedCreateNestedManyWithoutSetInput
  }

  export type FlashcardSetUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cleverTitle?: NullableStringFieldUpdateOperationsInput | string | null
    level?: NullableStringFieldUpdateOperationsInput | string | null
    goals?: FlashcardSetUpdategoalsInput | string[]
    specificTopics?: NullableStringFieldUpdateOperationsInput | string | null
    source?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    seriousnessLevel?: NullableIntFieldUpdateOperationsInput | number | null
    toneLevel?: NullableIntFieldUpdateOperationsInput | number | null
    llmBrand?: NullableStringFieldUpdateOperationsInput | string | null
    llmModel?: NullableStringFieldUpdateOperationsInput | string | null
    promptTemplate?: NullableStringFieldUpdateOperationsInput | string | null
    shareId?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFlashcardSetsNestedInput
    phrases?: PhraseUpdateManyWithoutFlashcardSetNestedInput
    progress?: UserSetProgressUpdateManyWithoutSetNestedInput
    publishedSet?: PublishedSetUpdateOneWithoutFlashcardSetsNestedInput
  }

  export type FlashcardSetUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cleverTitle?: NullableStringFieldUpdateOperationsInput | string | null
    level?: NullableStringFieldUpdateOperationsInput | string | null
    goals?: FlashcardSetUpdategoalsInput | string[]
    specificTopics?: NullableStringFieldUpdateOperationsInput | string | null
    source?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    seriousnessLevel?: NullableIntFieldUpdateOperationsInput | number | null
    toneLevel?: NullableIntFieldUpdateOperationsInput | number | null
    llmBrand?: NullableStringFieldUpdateOperationsInput | string | null
    llmModel?: NullableStringFieldUpdateOperationsInput | string | null
    promptTemplate?: NullableStringFieldUpdateOperationsInput | string | null
    shareId?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    publishedSetId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phrases?: PhraseUncheckedUpdateManyWithoutFlashcardSetNestedInput
    progress?: UserSetProgressUncheckedUpdateManyWithoutSetNestedInput
  }

  export type FlashcardSetCreateManyInput = {
    id?: string
    userId: string
    name: string
    description?: string | null
    cleverTitle?: string | null
    level?: string | null
    goals?: FlashcardSetCreategoalsInput | string[]
    specificTopics?: string | null
    source: string
    imageUrl?: string | null
    seriousnessLevel?: number | null
    toneLevel?: number | null
    llmBrand?: string | null
    llmModel?: string | null
    promptTemplate?: string | null
    shareId?: string | null
    isPublished?: boolean
    publishedSetId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FlashcardSetUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cleverTitle?: NullableStringFieldUpdateOperationsInput | string | null
    level?: NullableStringFieldUpdateOperationsInput | string | null
    goals?: FlashcardSetUpdategoalsInput | string[]
    specificTopics?: NullableStringFieldUpdateOperationsInput | string | null
    source?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    seriousnessLevel?: NullableIntFieldUpdateOperationsInput | number | null
    toneLevel?: NullableIntFieldUpdateOperationsInput | number | null
    llmBrand?: NullableStringFieldUpdateOperationsInput | string | null
    llmModel?: NullableStringFieldUpdateOperationsInput | string | null
    promptTemplate?: NullableStringFieldUpdateOperationsInput | string | null
    shareId?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FlashcardSetUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cleverTitle?: NullableStringFieldUpdateOperationsInput | string | null
    level?: NullableStringFieldUpdateOperationsInput | string | null
    goals?: FlashcardSetUpdategoalsInput | string[]
    specificTopics?: NullableStringFieldUpdateOperationsInput | string | null
    source?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    seriousnessLevel?: NullableIntFieldUpdateOperationsInput | number | null
    toneLevel?: NullableIntFieldUpdateOperationsInput | number | null
    llmBrand?: NullableStringFieldUpdateOperationsInput | string | null
    llmModel?: NullableStringFieldUpdateOperationsInput | string | null
    promptTemplate?: NullableStringFieldUpdateOperationsInput | string | null
    shareId?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    publishedSetId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PhraseCreateInput = {
    id?: string
    english: string
    thai: string
    thaiMasculine: string
    thaiFeminine: string
    pronunciation: string
    mnemonic?: string | null
    examplesJson?: NullableJsonNullValueInput | InputJsonValue
    difficulty?: number
    tags?: PhraseCreatetagsInput | string[]
    audioUrl?: string | null
    flashcardSet: FlashcardSetCreateNestedOneWithoutPhrasesInput
  }

  export type PhraseUncheckedCreateInput = {
    id?: string
    setId: string
    english: string
    thai: string
    thaiMasculine: string
    thaiFeminine: string
    pronunciation: string
    mnemonic?: string | null
    examplesJson?: NullableJsonNullValueInput | InputJsonValue
    difficulty?: number
    tags?: PhraseCreatetagsInput | string[]
    audioUrl?: string | null
  }

  export type PhraseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    english?: StringFieldUpdateOperationsInput | string
    thai?: StringFieldUpdateOperationsInput | string
    thaiMasculine?: StringFieldUpdateOperationsInput | string
    thaiFeminine?: StringFieldUpdateOperationsInput | string
    pronunciation?: StringFieldUpdateOperationsInput | string
    mnemonic?: NullableStringFieldUpdateOperationsInput | string | null
    examplesJson?: NullableJsonNullValueInput | InputJsonValue
    difficulty?: IntFieldUpdateOperationsInput | number
    tags?: PhraseUpdatetagsInput | string[]
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    flashcardSet?: FlashcardSetUpdateOneRequiredWithoutPhrasesNestedInput
  }

  export type PhraseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    setId?: StringFieldUpdateOperationsInput | string
    english?: StringFieldUpdateOperationsInput | string
    thai?: StringFieldUpdateOperationsInput | string
    thaiMasculine?: StringFieldUpdateOperationsInput | string
    thaiFeminine?: StringFieldUpdateOperationsInput | string
    pronunciation?: StringFieldUpdateOperationsInput | string
    mnemonic?: NullableStringFieldUpdateOperationsInput | string | null
    examplesJson?: NullableJsonNullValueInput | InputJsonValue
    difficulty?: IntFieldUpdateOperationsInput | number
    tags?: PhraseUpdatetagsInput | string[]
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PhraseCreateManyInput = {
    id?: string
    setId: string
    english: string
    thai: string
    thaiMasculine: string
    thaiFeminine: string
    pronunciation: string
    mnemonic?: string | null
    examplesJson?: NullableJsonNullValueInput | InputJsonValue
    difficulty?: number
    tags?: PhraseCreatetagsInput | string[]
    audioUrl?: string | null
  }

  export type PhraseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    english?: StringFieldUpdateOperationsInput | string
    thai?: StringFieldUpdateOperationsInput | string
    thaiMasculine?: StringFieldUpdateOperationsInput | string
    thaiFeminine?: StringFieldUpdateOperationsInput | string
    pronunciation?: StringFieldUpdateOperationsInput | string
    mnemonic?: NullableStringFieldUpdateOperationsInput | string | null
    examplesJson?: NullableJsonNullValueInput | InputJsonValue
    difficulty?: IntFieldUpdateOperationsInput | number
    tags?: PhraseUpdatetagsInput | string[]
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PhraseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    setId?: StringFieldUpdateOperationsInput | string
    english?: StringFieldUpdateOperationsInput | string
    thai?: StringFieldUpdateOperationsInput | string
    thaiMasculine?: StringFieldUpdateOperationsInput | string
    thaiFeminine?: StringFieldUpdateOperationsInput | string
    pronunciation?: StringFieldUpdateOperationsInput | string
    mnemonic?: NullableStringFieldUpdateOperationsInput | string | null
    examplesJson?: NullableJsonNullValueInput | InputJsonValue
    difficulty?: IntFieldUpdateOperationsInput | number
    tags?: PhraseUpdatetagsInput | string[]
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserSetProgressCreateInput = {
    id?: string
    progressData: JsonNullValueInput | InputJsonValue
    lastAccessedAt?: Date | string
    streak?: number
    bestStreak?: number
    totalReviews?: number
    user: UserCreateNestedOneWithoutProgressInput
    set: FlashcardSetCreateNestedOneWithoutProgressInput
  }

  export type UserSetProgressUncheckedCreateInput = {
    id?: string
    userId: string
    setId: string
    progressData: JsonNullValueInput | InputJsonValue
    lastAccessedAt?: Date | string
    streak?: number
    bestStreak?: number
    totalReviews?: number
  }

  export type UserSetProgressUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    progressData?: JsonNullValueInput | InputJsonValue
    lastAccessedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    streak?: IntFieldUpdateOperationsInput | number
    bestStreak?: IntFieldUpdateOperationsInput | number
    totalReviews?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutProgressNestedInput
    set?: FlashcardSetUpdateOneRequiredWithoutProgressNestedInput
  }

  export type UserSetProgressUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    setId?: StringFieldUpdateOperationsInput | string
    progressData?: JsonNullValueInput | InputJsonValue
    lastAccessedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    streak?: IntFieldUpdateOperationsInput | number
    bestStreak?: IntFieldUpdateOperationsInput | number
    totalReviews?: IntFieldUpdateOperationsInput | number
  }

  export type UserSetProgressCreateManyInput = {
    id?: string
    userId: string
    setId: string
    progressData: JsonNullValueInput | InputJsonValue
    lastAccessedAt?: Date | string
    streak?: number
    bestStreak?: number
    totalReviews?: number
  }

  export type UserSetProgressUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    progressData?: JsonNullValueInput | InputJsonValue
    lastAccessedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    streak?: IntFieldUpdateOperationsInput | number
    bestStreak?: IntFieldUpdateOperationsInput | number
    totalReviews?: IntFieldUpdateOperationsInput | number
  }

  export type UserSetProgressUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    setId?: StringFieldUpdateOperationsInput | string
    progressData?: JsonNullValueInput | InputJsonValue
    lastAccessedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    streak?: IntFieldUpdateOperationsInput | number
    bestStreak?: IntFieldUpdateOperationsInput | number
    totalReviews?: IntFieldUpdateOperationsInput | number
  }

  export type PublishedSetCreateInput = {
    id?: string
    title: string
    description?: string | null
    imageUrl?: string | null
    cardCount: number
    author: string
    llmBrand?: string | null
    llmModel?: string | null
    seriousnessLevel?: number | null
    proficiencyLevel?: string | null
    specificTopics?: string | null
    phrases: JsonNullValueInput | InputJsonValue
    rating?: number
    ratingCount?: number
    downloads?: number
    tags?: PublishedSetCreatetagsInput | string[]
    publishedAt?: Date | string
    updatedAt?: Date | string
    flashcardSets?: FlashcardSetCreateNestedManyWithoutPublishedSetInput
  }

  export type PublishedSetUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    imageUrl?: string | null
    cardCount: number
    author: string
    llmBrand?: string | null
    llmModel?: string | null
    seriousnessLevel?: number | null
    proficiencyLevel?: string | null
    specificTopics?: string | null
    phrases: JsonNullValueInput | InputJsonValue
    rating?: number
    ratingCount?: number
    downloads?: number
    tags?: PublishedSetCreatetagsInput | string[]
    publishedAt?: Date | string
    updatedAt?: Date | string
    flashcardSets?: FlashcardSetUncheckedCreateNestedManyWithoutPublishedSetInput
  }

  export type PublishedSetUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    cardCount?: IntFieldUpdateOperationsInput | number
    author?: StringFieldUpdateOperationsInput | string
    llmBrand?: NullableStringFieldUpdateOperationsInput | string | null
    llmModel?: NullableStringFieldUpdateOperationsInput | string | null
    seriousnessLevel?: NullableIntFieldUpdateOperationsInput | number | null
    proficiencyLevel?: NullableStringFieldUpdateOperationsInput | string | null
    specificTopics?: NullableStringFieldUpdateOperationsInput | string | null
    phrases?: JsonNullValueInput | InputJsonValue
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    downloads?: IntFieldUpdateOperationsInput | number
    tags?: PublishedSetUpdatetagsInput | string[]
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    flashcardSets?: FlashcardSetUpdateManyWithoutPublishedSetNestedInput
  }

  export type PublishedSetUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    cardCount?: IntFieldUpdateOperationsInput | number
    author?: StringFieldUpdateOperationsInput | string
    llmBrand?: NullableStringFieldUpdateOperationsInput | string | null
    llmModel?: NullableStringFieldUpdateOperationsInput | string | null
    seriousnessLevel?: NullableIntFieldUpdateOperationsInput | number | null
    proficiencyLevel?: NullableStringFieldUpdateOperationsInput | string | null
    specificTopics?: NullableStringFieldUpdateOperationsInput | string | null
    phrases?: JsonNullValueInput | InputJsonValue
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    downloads?: IntFieldUpdateOperationsInput | number
    tags?: PublishedSetUpdatetagsInput | string[]
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    flashcardSets?: FlashcardSetUncheckedUpdateManyWithoutPublishedSetNestedInput
  }

  export type PublishedSetCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    imageUrl?: string | null
    cardCount: number
    author: string
    llmBrand?: string | null
    llmModel?: string | null
    seriousnessLevel?: number | null
    proficiencyLevel?: string | null
    specificTopics?: string | null
    phrases: JsonNullValueInput | InputJsonValue
    rating?: number
    ratingCount?: number
    downloads?: number
    tags?: PublishedSetCreatetagsInput | string[]
    publishedAt?: Date | string
    updatedAt?: Date | string
  }

  export type PublishedSetUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    cardCount?: IntFieldUpdateOperationsInput | number
    author?: StringFieldUpdateOperationsInput | string
    llmBrand?: NullableStringFieldUpdateOperationsInput | string | null
    llmModel?: NullableStringFieldUpdateOperationsInput | string | null
    seriousnessLevel?: NullableIntFieldUpdateOperationsInput | number | null
    proficiencyLevel?: NullableStringFieldUpdateOperationsInput | string | null
    specificTopics?: NullableStringFieldUpdateOperationsInput | string | null
    phrases?: JsonNullValueInput | InputJsonValue
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    downloads?: IntFieldUpdateOperationsInput | number
    tags?: PublishedSetUpdatetagsInput | string[]
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PublishedSetUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    cardCount?: IntFieldUpdateOperationsInput | number
    author?: StringFieldUpdateOperationsInput | string
    llmBrand?: NullableStringFieldUpdateOperationsInput | string | null
    llmModel?: NullableStringFieldUpdateOperationsInput | string | null
    seriousnessLevel?: NullableIntFieldUpdateOperationsInput | number | null
    proficiencyLevel?: NullableStringFieldUpdateOperationsInput | string | null
    specificTopics?: NullableStringFieldUpdateOperationsInput | string | null
    phrases?: JsonNullValueInput | InputJsonValue
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    downloads?: IntFieldUpdateOperationsInput | number
    tags?: PublishedSetUpdatetagsInput | string[]
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type FlashcardSetListRelationFilter = {
    every?: FlashcardSetWhereInput
    some?: FlashcardSetWhereInput
    none?: FlashcardSetWhereInput
  }

  export type UserSetProgressListRelationFilter = {
    every?: UserSetProgressWhereInput
    some?: UserSetProgressWhereInput
    none?: UserSetProgressWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type FlashcardSetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserSetProgressOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    defaultLanguage?: SortOrder
    preferredVoice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    defaultLanguage?: SortOrder
    preferredVoice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    defaultLanguage?: SortOrder
    preferredVoice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type PhraseListRelationFilter = {
    every?: PhraseWhereInput
    some?: PhraseWhereInput
    none?: PhraseWhereInput
  }

  export type PublishedSetNullableScalarRelationFilter = {
    is?: PublishedSetWhereInput | null
    isNot?: PublishedSetWhereInput | null
  }

  export type PhraseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FlashcardSetCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    cleverTitle?: SortOrder
    level?: SortOrder
    goals?: SortOrder
    specificTopics?: SortOrder
    source?: SortOrder
    imageUrl?: SortOrder
    seriousnessLevel?: SortOrder
    toneLevel?: SortOrder
    llmBrand?: SortOrder
    llmModel?: SortOrder
    promptTemplate?: SortOrder
    shareId?: SortOrder
    isPublished?: SortOrder
    publishedSetId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FlashcardSetAvgOrderByAggregateInput = {
    seriousnessLevel?: SortOrder
    toneLevel?: SortOrder
  }

  export type FlashcardSetMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    cleverTitle?: SortOrder
    level?: SortOrder
    specificTopics?: SortOrder
    source?: SortOrder
    imageUrl?: SortOrder
    seriousnessLevel?: SortOrder
    toneLevel?: SortOrder
    llmBrand?: SortOrder
    llmModel?: SortOrder
    promptTemplate?: SortOrder
    shareId?: SortOrder
    isPublished?: SortOrder
    publishedSetId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FlashcardSetMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    cleverTitle?: SortOrder
    level?: SortOrder
    specificTopics?: SortOrder
    source?: SortOrder
    imageUrl?: SortOrder
    seriousnessLevel?: SortOrder
    toneLevel?: SortOrder
    llmBrand?: SortOrder
    llmModel?: SortOrder
    promptTemplate?: SortOrder
    shareId?: SortOrder
    isPublished?: SortOrder
    publishedSetId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FlashcardSetSumOrderByAggregateInput = {
    seriousnessLevel?: SortOrder
    toneLevel?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type FlashcardSetScalarRelationFilter = {
    is?: FlashcardSetWhereInput
    isNot?: FlashcardSetWhereInput
  }

  export type PhraseCountOrderByAggregateInput = {
    id?: SortOrder
    setId?: SortOrder
    english?: SortOrder
    thai?: SortOrder
    thaiMasculine?: SortOrder
    thaiFeminine?: SortOrder
    pronunciation?: SortOrder
    mnemonic?: SortOrder
    examplesJson?: SortOrder
    difficulty?: SortOrder
    tags?: SortOrder
    audioUrl?: SortOrder
  }

  export type PhraseAvgOrderByAggregateInput = {
    difficulty?: SortOrder
  }

  export type PhraseMaxOrderByAggregateInput = {
    id?: SortOrder
    setId?: SortOrder
    english?: SortOrder
    thai?: SortOrder
    thaiMasculine?: SortOrder
    thaiFeminine?: SortOrder
    pronunciation?: SortOrder
    mnemonic?: SortOrder
    difficulty?: SortOrder
    audioUrl?: SortOrder
  }

  export type PhraseMinOrderByAggregateInput = {
    id?: SortOrder
    setId?: SortOrder
    english?: SortOrder
    thai?: SortOrder
    thaiMasculine?: SortOrder
    thaiFeminine?: SortOrder
    pronunciation?: SortOrder
    mnemonic?: SortOrder
    difficulty?: SortOrder
    audioUrl?: SortOrder
  }

  export type PhraseSumOrderByAggregateInput = {
    difficulty?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type UserSetProgressUserIdSetIdCompoundUniqueInput = {
    userId: string
    setId: string
  }

  export type UserSetProgressCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    setId?: SortOrder
    progressData?: SortOrder
    lastAccessedAt?: SortOrder
    streak?: SortOrder
    bestStreak?: SortOrder
    totalReviews?: SortOrder
  }

  export type UserSetProgressAvgOrderByAggregateInput = {
    streak?: SortOrder
    bestStreak?: SortOrder
    totalReviews?: SortOrder
  }

  export type UserSetProgressMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    setId?: SortOrder
    lastAccessedAt?: SortOrder
    streak?: SortOrder
    bestStreak?: SortOrder
    totalReviews?: SortOrder
  }

  export type UserSetProgressMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    setId?: SortOrder
    lastAccessedAt?: SortOrder
    streak?: SortOrder
    bestStreak?: SortOrder
    totalReviews?: SortOrder
  }

  export type UserSetProgressSumOrderByAggregateInput = {
    streak?: SortOrder
    bestStreak?: SortOrder
    totalReviews?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type PublishedSetCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    cardCount?: SortOrder
    author?: SortOrder
    llmBrand?: SortOrder
    llmModel?: SortOrder
    seriousnessLevel?: SortOrder
    proficiencyLevel?: SortOrder
    specificTopics?: SortOrder
    phrases?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
    downloads?: SortOrder
    tags?: SortOrder
    publishedAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PublishedSetAvgOrderByAggregateInput = {
    cardCount?: SortOrder
    seriousnessLevel?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
    downloads?: SortOrder
  }

  export type PublishedSetMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    cardCount?: SortOrder
    author?: SortOrder
    llmBrand?: SortOrder
    llmModel?: SortOrder
    seriousnessLevel?: SortOrder
    proficiencyLevel?: SortOrder
    specificTopics?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
    downloads?: SortOrder
    publishedAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PublishedSetMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    cardCount?: SortOrder
    author?: SortOrder
    llmBrand?: SortOrder
    llmModel?: SortOrder
    seriousnessLevel?: SortOrder
    proficiencyLevel?: SortOrder
    specificTopics?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
    downloads?: SortOrder
    publishedAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PublishedSetSumOrderByAggregateInput = {
    cardCount?: SortOrder
    seriousnessLevel?: SortOrder
    rating?: SortOrder
    ratingCount?: SortOrder
    downloads?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type FlashcardSetCreateNestedManyWithoutUserInput = {
    create?: XOR<FlashcardSetCreateWithoutUserInput, FlashcardSetUncheckedCreateWithoutUserInput> | FlashcardSetCreateWithoutUserInput[] | FlashcardSetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FlashcardSetCreateOrConnectWithoutUserInput | FlashcardSetCreateOrConnectWithoutUserInput[]
    createMany?: FlashcardSetCreateManyUserInputEnvelope
    connect?: FlashcardSetWhereUniqueInput | FlashcardSetWhereUniqueInput[]
  }

  export type UserSetProgressCreateNestedManyWithoutUserInput = {
    create?: XOR<UserSetProgressCreateWithoutUserInput, UserSetProgressUncheckedCreateWithoutUserInput> | UserSetProgressCreateWithoutUserInput[] | UserSetProgressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSetProgressCreateOrConnectWithoutUserInput | UserSetProgressCreateOrConnectWithoutUserInput[]
    createMany?: UserSetProgressCreateManyUserInputEnvelope
    connect?: UserSetProgressWhereUniqueInput | UserSetProgressWhereUniqueInput[]
  }

  export type FlashcardSetUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FlashcardSetCreateWithoutUserInput, FlashcardSetUncheckedCreateWithoutUserInput> | FlashcardSetCreateWithoutUserInput[] | FlashcardSetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FlashcardSetCreateOrConnectWithoutUserInput | FlashcardSetCreateOrConnectWithoutUserInput[]
    createMany?: FlashcardSetCreateManyUserInputEnvelope
    connect?: FlashcardSetWhereUniqueInput | FlashcardSetWhereUniqueInput[]
  }

  export type UserSetProgressUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserSetProgressCreateWithoutUserInput, UserSetProgressUncheckedCreateWithoutUserInput> | UserSetProgressCreateWithoutUserInput[] | UserSetProgressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSetProgressCreateOrConnectWithoutUserInput | UserSetProgressCreateOrConnectWithoutUserInput[]
    createMany?: UserSetProgressCreateManyUserInputEnvelope
    connect?: UserSetProgressWhereUniqueInput | UserSetProgressWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type FlashcardSetUpdateManyWithoutUserNestedInput = {
    create?: XOR<FlashcardSetCreateWithoutUserInput, FlashcardSetUncheckedCreateWithoutUserInput> | FlashcardSetCreateWithoutUserInput[] | FlashcardSetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FlashcardSetCreateOrConnectWithoutUserInput | FlashcardSetCreateOrConnectWithoutUserInput[]
    upsert?: FlashcardSetUpsertWithWhereUniqueWithoutUserInput | FlashcardSetUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FlashcardSetCreateManyUserInputEnvelope
    set?: FlashcardSetWhereUniqueInput | FlashcardSetWhereUniqueInput[]
    disconnect?: FlashcardSetWhereUniqueInput | FlashcardSetWhereUniqueInput[]
    delete?: FlashcardSetWhereUniqueInput | FlashcardSetWhereUniqueInput[]
    connect?: FlashcardSetWhereUniqueInput | FlashcardSetWhereUniqueInput[]
    update?: FlashcardSetUpdateWithWhereUniqueWithoutUserInput | FlashcardSetUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FlashcardSetUpdateManyWithWhereWithoutUserInput | FlashcardSetUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FlashcardSetScalarWhereInput | FlashcardSetScalarWhereInput[]
  }

  export type UserSetProgressUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserSetProgressCreateWithoutUserInput, UserSetProgressUncheckedCreateWithoutUserInput> | UserSetProgressCreateWithoutUserInput[] | UserSetProgressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSetProgressCreateOrConnectWithoutUserInput | UserSetProgressCreateOrConnectWithoutUserInput[]
    upsert?: UserSetProgressUpsertWithWhereUniqueWithoutUserInput | UserSetProgressUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserSetProgressCreateManyUserInputEnvelope
    set?: UserSetProgressWhereUniqueInput | UserSetProgressWhereUniqueInput[]
    disconnect?: UserSetProgressWhereUniqueInput | UserSetProgressWhereUniqueInput[]
    delete?: UserSetProgressWhereUniqueInput | UserSetProgressWhereUniqueInput[]
    connect?: UserSetProgressWhereUniqueInput | UserSetProgressWhereUniqueInput[]
    update?: UserSetProgressUpdateWithWhereUniqueWithoutUserInput | UserSetProgressUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserSetProgressUpdateManyWithWhereWithoutUserInput | UserSetProgressUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserSetProgressScalarWhereInput | UserSetProgressScalarWhereInput[]
  }

  export type FlashcardSetUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FlashcardSetCreateWithoutUserInput, FlashcardSetUncheckedCreateWithoutUserInput> | FlashcardSetCreateWithoutUserInput[] | FlashcardSetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FlashcardSetCreateOrConnectWithoutUserInput | FlashcardSetCreateOrConnectWithoutUserInput[]
    upsert?: FlashcardSetUpsertWithWhereUniqueWithoutUserInput | FlashcardSetUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FlashcardSetCreateManyUserInputEnvelope
    set?: FlashcardSetWhereUniqueInput | FlashcardSetWhereUniqueInput[]
    disconnect?: FlashcardSetWhereUniqueInput | FlashcardSetWhereUniqueInput[]
    delete?: FlashcardSetWhereUniqueInput | FlashcardSetWhereUniqueInput[]
    connect?: FlashcardSetWhereUniqueInput | FlashcardSetWhereUniqueInput[]
    update?: FlashcardSetUpdateWithWhereUniqueWithoutUserInput | FlashcardSetUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FlashcardSetUpdateManyWithWhereWithoutUserInput | FlashcardSetUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FlashcardSetScalarWhereInput | FlashcardSetScalarWhereInput[]
  }

  export type UserSetProgressUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserSetProgressCreateWithoutUserInput, UserSetProgressUncheckedCreateWithoutUserInput> | UserSetProgressCreateWithoutUserInput[] | UserSetProgressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSetProgressCreateOrConnectWithoutUserInput | UserSetProgressCreateOrConnectWithoutUserInput[]
    upsert?: UserSetProgressUpsertWithWhereUniqueWithoutUserInput | UserSetProgressUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserSetProgressCreateManyUserInputEnvelope
    set?: UserSetProgressWhereUniqueInput | UserSetProgressWhereUniqueInput[]
    disconnect?: UserSetProgressWhereUniqueInput | UserSetProgressWhereUniqueInput[]
    delete?: UserSetProgressWhereUniqueInput | UserSetProgressWhereUniqueInput[]
    connect?: UserSetProgressWhereUniqueInput | UserSetProgressWhereUniqueInput[]
    update?: UserSetProgressUpdateWithWhereUniqueWithoutUserInput | UserSetProgressUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserSetProgressUpdateManyWithWhereWithoutUserInput | UserSetProgressUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserSetProgressScalarWhereInput | UserSetProgressScalarWhereInput[]
  }

  export type FlashcardSetCreategoalsInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutFlashcardSetsInput = {
    create?: XOR<UserCreateWithoutFlashcardSetsInput, UserUncheckedCreateWithoutFlashcardSetsInput>
    connectOrCreate?: UserCreateOrConnectWithoutFlashcardSetsInput
    connect?: UserWhereUniqueInput
  }

  export type PhraseCreateNestedManyWithoutFlashcardSetInput = {
    create?: XOR<PhraseCreateWithoutFlashcardSetInput, PhraseUncheckedCreateWithoutFlashcardSetInput> | PhraseCreateWithoutFlashcardSetInput[] | PhraseUncheckedCreateWithoutFlashcardSetInput[]
    connectOrCreate?: PhraseCreateOrConnectWithoutFlashcardSetInput | PhraseCreateOrConnectWithoutFlashcardSetInput[]
    createMany?: PhraseCreateManyFlashcardSetInputEnvelope
    connect?: PhraseWhereUniqueInput | PhraseWhereUniqueInput[]
  }

  export type UserSetProgressCreateNestedManyWithoutSetInput = {
    create?: XOR<UserSetProgressCreateWithoutSetInput, UserSetProgressUncheckedCreateWithoutSetInput> | UserSetProgressCreateWithoutSetInput[] | UserSetProgressUncheckedCreateWithoutSetInput[]
    connectOrCreate?: UserSetProgressCreateOrConnectWithoutSetInput | UserSetProgressCreateOrConnectWithoutSetInput[]
    createMany?: UserSetProgressCreateManySetInputEnvelope
    connect?: UserSetProgressWhereUniqueInput | UserSetProgressWhereUniqueInput[]
  }

  export type PublishedSetCreateNestedOneWithoutFlashcardSetsInput = {
    create?: XOR<PublishedSetCreateWithoutFlashcardSetsInput, PublishedSetUncheckedCreateWithoutFlashcardSetsInput>
    connectOrCreate?: PublishedSetCreateOrConnectWithoutFlashcardSetsInput
    connect?: PublishedSetWhereUniqueInput
  }

  export type PhraseUncheckedCreateNestedManyWithoutFlashcardSetInput = {
    create?: XOR<PhraseCreateWithoutFlashcardSetInput, PhraseUncheckedCreateWithoutFlashcardSetInput> | PhraseCreateWithoutFlashcardSetInput[] | PhraseUncheckedCreateWithoutFlashcardSetInput[]
    connectOrCreate?: PhraseCreateOrConnectWithoutFlashcardSetInput | PhraseCreateOrConnectWithoutFlashcardSetInput[]
    createMany?: PhraseCreateManyFlashcardSetInputEnvelope
    connect?: PhraseWhereUniqueInput | PhraseWhereUniqueInput[]
  }

  export type UserSetProgressUncheckedCreateNestedManyWithoutSetInput = {
    create?: XOR<UserSetProgressCreateWithoutSetInput, UserSetProgressUncheckedCreateWithoutSetInput> | UserSetProgressCreateWithoutSetInput[] | UserSetProgressUncheckedCreateWithoutSetInput[]
    connectOrCreate?: UserSetProgressCreateOrConnectWithoutSetInput | UserSetProgressCreateOrConnectWithoutSetInput[]
    createMany?: UserSetProgressCreateManySetInputEnvelope
    connect?: UserSetProgressWhereUniqueInput | UserSetProgressWhereUniqueInput[]
  }

  export type FlashcardSetUpdategoalsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutFlashcardSetsNestedInput = {
    create?: XOR<UserCreateWithoutFlashcardSetsInput, UserUncheckedCreateWithoutFlashcardSetsInput>
    connectOrCreate?: UserCreateOrConnectWithoutFlashcardSetsInput
    upsert?: UserUpsertWithoutFlashcardSetsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFlashcardSetsInput, UserUpdateWithoutFlashcardSetsInput>, UserUncheckedUpdateWithoutFlashcardSetsInput>
  }

  export type PhraseUpdateManyWithoutFlashcardSetNestedInput = {
    create?: XOR<PhraseCreateWithoutFlashcardSetInput, PhraseUncheckedCreateWithoutFlashcardSetInput> | PhraseCreateWithoutFlashcardSetInput[] | PhraseUncheckedCreateWithoutFlashcardSetInput[]
    connectOrCreate?: PhraseCreateOrConnectWithoutFlashcardSetInput | PhraseCreateOrConnectWithoutFlashcardSetInput[]
    upsert?: PhraseUpsertWithWhereUniqueWithoutFlashcardSetInput | PhraseUpsertWithWhereUniqueWithoutFlashcardSetInput[]
    createMany?: PhraseCreateManyFlashcardSetInputEnvelope
    set?: PhraseWhereUniqueInput | PhraseWhereUniqueInput[]
    disconnect?: PhraseWhereUniqueInput | PhraseWhereUniqueInput[]
    delete?: PhraseWhereUniqueInput | PhraseWhereUniqueInput[]
    connect?: PhraseWhereUniqueInput | PhraseWhereUniqueInput[]
    update?: PhraseUpdateWithWhereUniqueWithoutFlashcardSetInput | PhraseUpdateWithWhereUniqueWithoutFlashcardSetInput[]
    updateMany?: PhraseUpdateManyWithWhereWithoutFlashcardSetInput | PhraseUpdateManyWithWhereWithoutFlashcardSetInput[]
    deleteMany?: PhraseScalarWhereInput | PhraseScalarWhereInput[]
  }

  export type UserSetProgressUpdateManyWithoutSetNestedInput = {
    create?: XOR<UserSetProgressCreateWithoutSetInput, UserSetProgressUncheckedCreateWithoutSetInput> | UserSetProgressCreateWithoutSetInput[] | UserSetProgressUncheckedCreateWithoutSetInput[]
    connectOrCreate?: UserSetProgressCreateOrConnectWithoutSetInput | UserSetProgressCreateOrConnectWithoutSetInput[]
    upsert?: UserSetProgressUpsertWithWhereUniqueWithoutSetInput | UserSetProgressUpsertWithWhereUniqueWithoutSetInput[]
    createMany?: UserSetProgressCreateManySetInputEnvelope
    set?: UserSetProgressWhereUniqueInput | UserSetProgressWhereUniqueInput[]
    disconnect?: UserSetProgressWhereUniqueInput | UserSetProgressWhereUniqueInput[]
    delete?: UserSetProgressWhereUniqueInput | UserSetProgressWhereUniqueInput[]
    connect?: UserSetProgressWhereUniqueInput | UserSetProgressWhereUniqueInput[]
    update?: UserSetProgressUpdateWithWhereUniqueWithoutSetInput | UserSetProgressUpdateWithWhereUniqueWithoutSetInput[]
    updateMany?: UserSetProgressUpdateManyWithWhereWithoutSetInput | UserSetProgressUpdateManyWithWhereWithoutSetInput[]
    deleteMany?: UserSetProgressScalarWhereInput | UserSetProgressScalarWhereInput[]
  }

  export type PublishedSetUpdateOneWithoutFlashcardSetsNestedInput = {
    create?: XOR<PublishedSetCreateWithoutFlashcardSetsInput, PublishedSetUncheckedCreateWithoutFlashcardSetsInput>
    connectOrCreate?: PublishedSetCreateOrConnectWithoutFlashcardSetsInput
    upsert?: PublishedSetUpsertWithoutFlashcardSetsInput
    disconnect?: PublishedSetWhereInput | boolean
    delete?: PublishedSetWhereInput | boolean
    connect?: PublishedSetWhereUniqueInput
    update?: XOR<XOR<PublishedSetUpdateToOneWithWhereWithoutFlashcardSetsInput, PublishedSetUpdateWithoutFlashcardSetsInput>, PublishedSetUncheckedUpdateWithoutFlashcardSetsInput>
  }

  export type PhraseUncheckedUpdateManyWithoutFlashcardSetNestedInput = {
    create?: XOR<PhraseCreateWithoutFlashcardSetInput, PhraseUncheckedCreateWithoutFlashcardSetInput> | PhraseCreateWithoutFlashcardSetInput[] | PhraseUncheckedCreateWithoutFlashcardSetInput[]
    connectOrCreate?: PhraseCreateOrConnectWithoutFlashcardSetInput | PhraseCreateOrConnectWithoutFlashcardSetInput[]
    upsert?: PhraseUpsertWithWhereUniqueWithoutFlashcardSetInput | PhraseUpsertWithWhereUniqueWithoutFlashcardSetInput[]
    createMany?: PhraseCreateManyFlashcardSetInputEnvelope
    set?: PhraseWhereUniqueInput | PhraseWhereUniqueInput[]
    disconnect?: PhraseWhereUniqueInput | PhraseWhereUniqueInput[]
    delete?: PhraseWhereUniqueInput | PhraseWhereUniqueInput[]
    connect?: PhraseWhereUniqueInput | PhraseWhereUniqueInput[]
    update?: PhraseUpdateWithWhereUniqueWithoutFlashcardSetInput | PhraseUpdateWithWhereUniqueWithoutFlashcardSetInput[]
    updateMany?: PhraseUpdateManyWithWhereWithoutFlashcardSetInput | PhraseUpdateManyWithWhereWithoutFlashcardSetInput[]
    deleteMany?: PhraseScalarWhereInput | PhraseScalarWhereInput[]
  }

  export type UserSetProgressUncheckedUpdateManyWithoutSetNestedInput = {
    create?: XOR<UserSetProgressCreateWithoutSetInput, UserSetProgressUncheckedCreateWithoutSetInput> | UserSetProgressCreateWithoutSetInput[] | UserSetProgressUncheckedCreateWithoutSetInput[]
    connectOrCreate?: UserSetProgressCreateOrConnectWithoutSetInput | UserSetProgressCreateOrConnectWithoutSetInput[]
    upsert?: UserSetProgressUpsertWithWhereUniqueWithoutSetInput | UserSetProgressUpsertWithWhereUniqueWithoutSetInput[]
    createMany?: UserSetProgressCreateManySetInputEnvelope
    set?: UserSetProgressWhereUniqueInput | UserSetProgressWhereUniqueInput[]
    disconnect?: UserSetProgressWhereUniqueInput | UserSetProgressWhereUniqueInput[]
    delete?: UserSetProgressWhereUniqueInput | UserSetProgressWhereUniqueInput[]
    connect?: UserSetProgressWhereUniqueInput | UserSetProgressWhereUniqueInput[]
    update?: UserSetProgressUpdateWithWhereUniqueWithoutSetInput | UserSetProgressUpdateWithWhereUniqueWithoutSetInput[]
    updateMany?: UserSetProgressUpdateManyWithWhereWithoutSetInput | UserSetProgressUpdateManyWithWhereWithoutSetInput[]
    deleteMany?: UserSetProgressScalarWhereInput | UserSetProgressScalarWhereInput[]
  }

  export type PhraseCreatetagsInput = {
    set: string[]
  }

  export type FlashcardSetCreateNestedOneWithoutPhrasesInput = {
    create?: XOR<FlashcardSetCreateWithoutPhrasesInput, FlashcardSetUncheckedCreateWithoutPhrasesInput>
    connectOrCreate?: FlashcardSetCreateOrConnectWithoutPhrasesInput
    connect?: FlashcardSetWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PhraseUpdatetagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type FlashcardSetUpdateOneRequiredWithoutPhrasesNestedInput = {
    create?: XOR<FlashcardSetCreateWithoutPhrasesInput, FlashcardSetUncheckedCreateWithoutPhrasesInput>
    connectOrCreate?: FlashcardSetCreateOrConnectWithoutPhrasesInput
    upsert?: FlashcardSetUpsertWithoutPhrasesInput
    connect?: FlashcardSetWhereUniqueInput
    update?: XOR<XOR<FlashcardSetUpdateToOneWithWhereWithoutPhrasesInput, FlashcardSetUpdateWithoutPhrasesInput>, FlashcardSetUncheckedUpdateWithoutPhrasesInput>
  }

  export type UserCreateNestedOneWithoutProgressInput = {
    create?: XOR<UserCreateWithoutProgressInput, UserUncheckedCreateWithoutProgressInput>
    connectOrCreate?: UserCreateOrConnectWithoutProgressInput
    connect?: UserWhereUniqueInput
  }

  export type FlashcardSetCreateNestedOneWithoutProgressInput = {
    create?: XOR<FlashcardSetCreateWithoutProgressInput, FlashcardSetUncheckedCreateWithoutProgressInput>
    connectOrCreate?: FlashcardSetCreateOrConnectWithoutProgressInput
    connect?: FlashcardSetWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutProgressNestedInput = {
    create?: XOR<UserCreateWithoutProgressInput, UserUncheckedCreateWithoutProgressInput>
    connectOrCreate?: UserCreateOrConnectWithoutProgressInput
    upsert?: UserUpsertWithoutProgressInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProgressInput, UserUpdateWithoutProgressInput>, UserUncheckedUpdateWithoutProgressInput>
  }

  export type FlashcardSetUpdateOneRequiredWithoutProgressNestedInput = {
    create?: XOR<FlashcardSetCreateWithoutProgressInput, FlashcardSetUncheckedCreateWithoutProgressInput>
    connectOrCreate?: FlashcardSetCreateOrConnectWithoutProgressInput
    upsert?: FlashcardSetUpsertWithoutProgressInput
    connect?: FlashcardSetWhereUniqueInput
    update?: XOR<XOR<FlashcardSetUpdateToOneWithWhereWithoutProgressInput, FlashcardSetUpdateWithoutProgressInput>, FlashcardSetUncheckedUpdateWithoutProgressInput>
  }

  export type PublishedSetCreatetagsInput = {
    set: string[]
  }

  export type FlashcardSetCreateNestedManyWithoutPublishedSetInput = {
    create?: XOR<FlashcardSetCreateWithoutPublishedSetInput, FlashcardSetUncheckedCreateWithoutPublishedSetInput> | FlashcardSetCreateWithoutPublishedSetInput[] | FlashcardSetUncheckedCreateWithoutPublishedSetInput[]
    connectOrCreate?: FlashcardSetCreateOrConnectWithoutPublishedSetInput | FlashcardSetCreateOrConnectWithoutPublishedSetInput[]
    createMany?: FlashcardSetCreateManyPublishedSetInputEnvelope
    connect?: FlashcardSetWhereUniqueInput | FlashcardSetWhereUniqueInput[]
  }

  export type FlashcardSetUncheckedCreateNestedManyWithoutPublishedSetInput = {
    create?: XOR<FlashcardSetCreateWithoutPublishedSetInput, FlashcardSetUncheckedCreateWithoutPublishedSetInput> | FlashcardSetCreateWithoutPublishedSetInput[] | FlashcardSetUncheckedCreateWithoutPublishedSetInput[]
    connectOrCreate?: FlashcardSetCreateOrConnectWithoutPublishedSetInput | FlashcardSetCreateOrConnectWithoutPublishedSetInput[]
    createMany?: FlashcardSetCreateManyPublishedSetInputEnvelope
    connect?: FlashcardSetWhereUniqueInput | FlashcardSetWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PublishedSetUpdatetagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type FlashcardSetUpdateManyWithoutPublishedSetNestedInput = {
    create?: XOR<FlashcardSetCreateWithoutPublishedSetInput, FlashcardSetUncheckedCreateWithoutPublishedSetInput> | FlashcardSetCreateWithoutPublishedSetInput[] | FlashcardSetUncheckedCreateWithoutPublishedSetInput[]
    connectOrCreate?: FlashcardSetCreateOrConnectWithoutPublishedSetInput | FlashcardSetCreateOrConnectWithoutPublishedSetInput[]
    upsert?: FlashcardSetUpsertWithWhereUniqueWithoutPublishedSetInput | FlashcardSetUpsertWithWhereUniqueWithoutPublishedSetInput[]
    createMany?: FlashcardSetCreateManyPublishedSetInputEnvelope
    set?: FlashcardSetWhereUniqueInput | FlashcardSetWhereUniqueInput[]
    disconnect?: FlashcardSetWhereUniqueInput | FlashcardSetWhereUniqueInput[]
    delete?: FlashcardSetWhereUniqueInput | FlashcardSetWhereUniqueInput[]
    connect?: FlashcardSetWhereUniqueInput | FlashcardSetWhereUniqueInput[]
    update?: FlashcardSetUpdateWithWhereUniqueWithoutPublishedSetInput | FlashcardSetUpdateWithWhereUniqueWithoutPublishedSetInput[]
    updateMany?: FlashcardSetUpdateManyWithWhereWithoutPublishedSetInput | FlashcardSetUpdateManyWithWhereWithoutPublishedSetInput[]
    deleteMany?: FlashcardSetScalarWhereInput | FlashcardSetScalarWhereInput[]
  }

  export type FlashcardSetUncheckedUpdateManyWithoutPublishedSetNestedInput = {
    create?: XOR<FlashcardSetCreateWithoutPublishedSetInput, FlashcardSetUncheckedCreateWithoutPublishedSetInput> | FlashcardSetCreateWithoutPublishedSetInput[] | FlashcardSetUncheckedCreateWithoutPublishedSetInput[]
    connectOrCreate?: FlashcardSetCreateOrConnectWithoutPublishedSetInput | FlashcardSetCreateOrConnectWithoutPublishedSetInput[]
    upsert?: FlashcardSetUpsertWithWhereUniqueWithoutPublishedSetInput | FlashcardSetUpsertWithWhereUniqueWithoutPublishedSetInput[]
    createMany?: FlashcardSetCreateManyPublishedSetInputEnvelope
    set?: FlashcardSetWhereUniqueInput | FlashcardSetWhereUniqueInput[]
    disconnect?: FlashcardSetWhereUniqueInput | FlashcardSetWhereUniqueInput[]
    delete?: FlashcardSetWhereUniqueInput | FlashcardSetWhereUniqueInput[]
    connect?: FlashcardSetWhereUniqueInput | FlashcardSetWhereUniqueInput[]
    update?: FlashcardSetUpdateWithWhereUniqueWithoutPublishedSetInput | FlashcardSetUpdateWithWhereUniqueWithoutPublishedSetInput[]
    updateMany?: FlashcardSetUpdateManyWithWhereWithoutPublishedSetInput | FlashcardSetUpdateManyWithWhereWithoutPublishedSetInput[]
    deleteMany?: FlashcardSetScalarWhereInput | FlashcardSetScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type FlashcardSetCreateWithoutUserInput = {
    id?: string
    name: string
    description?: string | null
    cleverTitle?: string | null
    level?: string | null
    goals?: FlashcardSetCreategoalsInput | string[]
    specificTopics?: string | null
    source: string
    imageUrl?: string | null
    seriousnessLevel?: number | null
    toneLevel?: number | null
    llmBrand?: string | null
    llmModel?: string | null
    promptTemplate?: string | null
    shareId?: string | null
    isPublished?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    phrases?: PhraseCreateNestedManyWithoutFlashcardSetInput
    progress?: UserSetProgressCreateNestedManyWithoutSetInput
    publishedSet?: PublishedSetCreateNestedOneWithoutFlashcardSetsInput
  }

  export type FlashcardSetUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    description?: string | null
    cleverTitle?: string | null
    level?: string | null
    goals?: FlashcardSetCreategoalsInput | string[]
    specificTopics?: string | null
    source: string
    imageUrl?: string | null
    seriousnessLevel?: number | null
    toneLevel?: number | null
    llmBrand?: string | null
    llmModel?: string | null
    promptTemplate?: string | null
    shareId?: string | null
    isPublished?: boolean
    publishedSetId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    phrases?: PhraseUncheckedCreateNestedManyWithoutFlashcardSetInput
    progress?: UserSetProgressUncheckedCreateNestedManyWithoutSetInput
  }

  export type FlashcardSetCreateOrConnectWithoutUserInput = {
    where: FlashcardSetWhereUniqueInput
    create: XOR<FlashcardSetCreateWithoutUserInput, FlashcardSetUncheckedCreateWithoutUserInput>
  }

  export type FlashcardSetCreateManyUserInputEnvelope = {
    data: FlashcardSetCreateManyUserInput | FlashcardSetCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserSetProgressCreateWithoutUserInput = {
    id?: string
    progressData: JsonNullValueInput | InputJsonValue
    lastAccessedAt?: Date | string
    streak?: number
    bestStreak?: number
    totalReviews?: number
    set: FlashcardSetCreateNestedOneWithoutProgressInput
  }

  export type UserSetProgressUncheckedCreateWithoutUserInput = {
    id?: string
    setId: string
    progressData: JsonNullValueInput | InputJsonValue
    lastAccessedAt?: Date | string
    streak?: number
    bestStreak?: number
    totalReviews?: number
  }

  export type UserSetProgressCreateOrConnectWithoutUserInput = {
    where: UserSetProgressWhereUniqueInput
    create: XOR<UserSetProgressCreateWithoutUserInput, UserSetProgressUncheckedCreateWithoutUserInput>
  }

  export type UserSetProgressCreateManyUserInputEnvelope = {
    data: UserSetProgressCreateManyUserInput | UserSetProgressCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FlashcardSetUpsertWithWhereUniqueWithoutUserInput = {
    where: FlashcardSetWhereUniqueInput
    update: XOR<FlashcardSetUpdateWithoutUserInput, FlashcardSetUncheckedUpdateWithoutUserInput>
    create: XOR<FlashcardSetCreateWithoutUserInput, FlashcardSetUncheckedCreateWithoutUserInput>
  }

  export type FlashcardSetUpdateWithWhereUniqueWithoutUserInput = {
    where: FlashcardSetWhereUniqueInput
    data: XOR<FlashcardSetUpdateWithoutUserInput, FlashcardSetUncheckedUpdateWithoutUserInput>
  }

  export type FlashcardSetUpdateManyWithWhereWithoutUserInput = {
    where: FlashcardSetScalarWhereInput
    data: XOR<FlashcardSetUpdateManyMutationInput, FlashcardSetUncheckedUpdateManyWithoutUserInput>
  }

  export type FlashcardSetScalarWhereInput = {
    AND?: FlashcardSetScalarWhereInput | FlashcardSetScalarWhereInput[]
    OR?: FlashcardSetScalarWhereInput[]
    NOT?: FlashcardSetScalarWhereInput | FlashcardSetScalarWhereInput[]
    id?: StringFilter<"FlashcardSet"> | string
    userId?: StringFilter<"FlashcardSet"> | string
    name?: StringFilter<"FlashcardSet"> | string
    description?: StringNullableFilter<"FlashcardSet"> | string | null
    cleverTitle?: StringNullableFilter<"FlashcardSet"> | string | null
    level?: StringNullableFilter<"FlashcardSet"> | string | null
    goals?: StringNullableListFilter<"FlashcardSet">
    specificTopics?: StringNullableFilter<"FlashcardSet"> | string | null
    source?: StringFilter<"FlashcardSet"> | string
    imageUrl?: StringNullableFilter<"FlashcardSet"> | string | null
    seriousnessLevel?: IntNullableFilter<"FlashcardSet"> | number | null
    toneLevel?: IntNullableFilter<"FlashcardSet"> | number | null
    llmBrand?: StringNullableFilter<"FlashcardSet"> | string | null
    llmModel?: StringNullableFilter<"FlashcardSet"> | string | null
    promptTemplate?: StringNullableFilter<"FlashcardSet"> | string | null
    shareId?: StringNullableFilter<"FlashcardSet"> | string | null
    isPublished?: BoolFilter<"FlashcardSet"> | boolean
    publishedSetId?: StringNullableFilter<"FlashcardSet"> | string | null
    createdAt?: DateTimeFilter<"FlashcardSet"> | Date | string
    updatedAt?: DateTimeFilter<"FlashcardSet"> | Date | string
  }

  export type UserSetProgressUpsertWithWhereUniqueWithoutUserInput = {
    where: UserSetProgressWhereUniqueInput
    update: XOR<UserSetProgressUpdateWithoutUserInput, UserSetProgressUncheckedUpdateWithoutUserInput>
    create: XOR<UserSetProgressCreateWithoutUserInput, UserSetProgressUncheckedCreateWithoutUserInput>
  }

  export type UserSetProgressUpdateWithWhereUniqueWithoutUserInput = {
    where: UserSetProgressWhereUniqueInput
    data: XOR<UserSetProgressUpdateWithoutUserInput, UserSetProgressUncheckedUpdateWithoutUserInput>
  }

  export type UserSetProgressUpdateManyWithWhereWithoutUserInput = {
    where: UserSetProgressScalarWhereInput
    data: XOR<UserSetProgressUpdateManyMutationInput, UserSetProgressUncheckedUpdateManyWithoutUserInput>
  }

  export type UserSetProgressScalarWhereInput = {
    AND?: UserSetProgressScalarWhereInput | UserSetProgressScalarWhereInput[]
    OR?: UserSetProgressScalarWhereInput[]
    NOT?: UserSetProgressScalarWhereInput | UserSetProgressScalarWhereInput[]
    id?: StringFilter<"UserSetProgress"> | string
    userId?: StringFilter<"UserSetProgress"> | string
    setId?: StringFilter<"UserSetProgress"> | string
    progressData?: JsonFilter<"UserSetProgress">
    lastAccessedAt?: DateTimeFilter<"UserSetProgress"> | Date | string
    streak?: IntFilter<"UserSetProgress"> | number
    bestStreak?: IntFilter<"UserSetProgress"> | number
    totalReviews?: IntFilter<"UserSetProgress"> | number
  }

  export type UserCreateWithoutFlashcardSetsInput = {
    id: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    defaultLanguage?: string
    preferredVoice?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    progress?: UserSetProgressCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFlashcardSetsInput = {
    id: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    defaultLanguage?: string
    preferredVoice?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    progress?: UserSetProgressUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFlashcardSetsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFlashcardSetsInput, UserUncheckedCreateWithoutFlashcardSetsInput>
  }

  export type PhraseCreateWithoutFlashcardSetInput = {
    id?: string
    english: string
    thai: string
    thaiMasculine: string
    thaiFeminine: string
    pronunciation: string
    mnemonic?: string | null
    examplesJson?: NullableJsonNullValueInput | InputJsonValue
    difficulty?: number
    tags?: PhraseCreatetagsInput | string[]
    audioUrl?: string | null
  }

  export type PhraseUncheckedCreateWithoutFlashcardSetInput = {
    id?: string
    english: string
    thai: string
    thaiMasculine: string
    thaiFeminine: string
    pronunciation: string
    mnemonic?: string | null
    examplesJson?: NullableJsonNullValueInput | InputJsonValue
    difficulty?: number
    tags?: PhraseCreatetagsInput | string[]
    audioUrl?: string | null
  }

  export type PhraseCreateOrConnectWithoutFlashcardSetInput = {
    where: PhraseWhereUniqueInput
    create: XOR<PhraseCreateWithoutFlashcardSetInput, PhraseUncheckedCreateWithoutFlashcardSetInput>
  }

  export type PhraseCreateManyFlashcardSetInputEnvelope = {
    data: PhraseCreateManyFlashcardSetInput | PhraseCreateManyFlashcardSetInput[]
    skipDuplicates?: boolean
  }

  export type UserSetProgressCreateWithoutSetInput = {
    id?: string
    progressData: JsonNullValueInput | InputJsonValue
    lastAccessedAt?: Date | string
    streak?: number
    bestStreak?: number
    totalReviews?: number
    user: UserCreateNestedOneWithoutProgressInput
  }

  export type UserSetProgressUncheckedCreateWithoutSetInput = {
    id?: string
    userId: string
    progressData: JsonNullValueInput | InputJsonValue
    lastAccessedAt?: Date | string
    streak?: number
    bestStreak?: number
    totalReviews?: number
  }

  export type UserSetProgressCreateOrConnectWithoutSetInput = {
    where: UserSetProgressWhereUniqueInput
    create: XOR<UserSetProgressCreateWithoutSetInput, UserSetProgressUncheckedCreateWithoutSetInput>
  }

  export type UserSetProgressCreateManySetInputEnvelope = {
    data: UserSetProgressCreateManySetInput | UserSetProgressCreateManySetInput[]
    skipDuplicates?: boolean
  }

  export type PublishedSetCreateWithoutFlashcardSetsInput = {
    id?: string
    title: string
    description?: string | null
    imageUrl?: string | null
    cardCount: number
    author: string
    llmBrand?: string | null
    llmModel?: string | null
    seriousnessLevel?: number | null
    proficiencyLevel?: string | null
    specificTopics?: string | null
    phrases: JsonNullValueInput | InputJsonValue
    rating?: number
    ratingCount?: number
    downloads?: number
    tags?: PublishedSetCreatetagsInput | string[]
    publishedAt?: Date | string
    updatedAt?: Date | string
  }

  export type PublishedSetUncheckedCreateWithoutFlashcardSetsInput = {
    id?: string
    title: string
    description?: string | null
    imageUrl?: string | null
    cardCount: number
    author: string
    llmBrand?: string | null
    llmModel?: string | null
    seriousnessLevel?: number | null
    proficiencyLevel?: string | null
    specificTopics?: string | null
    phrases: JsonNullValueInput | InputJsonValue
    rating?: number
    ratingCount?: number
    downloads?: number
    tags?: PublishedSetCreatetagsInput | string[]
    publishedAt?: Date | string
    updatedAt?: Date | string
  }

  export type PublishedSetCreateOrConnectWithoutFlashcardSetsInput = {
    where: PublishedSetWhereUniqueInput
    create: XOR<PublishedSetCreateWithoutFlashcardSetsInput, PublishedSetUncheckedCreateWithoutFlashcardSetsInput>
  }

  export type UserUpsertWithoutFlashcardSetsInput = {
    update: XOR<UserUpdateWithoutFlashcardSetsInput, UserUncheckedUpdateWithoutFlashcardSetsInput>
    create: XOR<UserCreateWithoutFlashcardSetsInput, UserUncheckedCreateWithoutFlashcardSetsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFlashcardSetsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFlashcardSetsInput, UserUncheckedUpdateWithoutFlashcardSetsInput>
  }

  export type UserUpdateWithoutFlashcardSetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    defaultLanguage?: StringFieldUpdateOperationsInput | string
    preferredVoice?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: UserSetProgressUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFlashcardSetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    defaultLanguage?: StringFieldUpdateOperationsInput | string
    preferredVoice?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: UserSetProgressUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PhraseUpsertWithWhereUniqueWithoutFlashcardSetInput = {
    where: PhraseWhereUniqueInput
    update: XOR<PhraseUpdateWithoutFlashcardSetInput, PhraseUncheckedUpdateWithoutFlashcardSetInput>
    create: XOR<PhraseCreateWithoutFlashcardSetInput, PhraseUncheckedCreateWithoutFlashcardSetInput>
  }

  export type PhraseUpdateWithWhereUniqueWithoutFlashcardSetInput = {
    where: PhraseWhereUniqueInput
    data: XOR<PhraseUpdateWithoutFlashcardSetInput, PhraseUncheckedUpdateWithoutFlashcardSetInput>
  }

  export type PhraseUpdateManyWithWhereWithoutFlashcardSetInput = {
    where: PhraseScalarWhereInput
    data: XOR<PhraseUpdateManyMutationInput, PhraseUncheckedUpdateManyWithoutFlashcardSetInput>
  }

  export type PhraseScalarWhereInput = {
    AND?: PhraseScalarWhereInput | PhraseScalarWhereInput[]
    OR?: PhraseScalarWhereInput[]
    NOT?: PhraseScalarWhereInput | PhraseScalarWhereInput[]
    id?: StringFilter<"Phrase"> | string
    setId?: StringFilter<"Phrase"> | string
    english?: StringFilter<"Phrase"> | string
    thai?: StringFilter<"Phrase"> | string
    thaiMasculine?: StringFilter<"Phrase"> | string
    thaiFeminine?: StringFilter<"Phrase"> | string
    pronunciation?: StringFilter<"Phrase"> | string
    mnemonic?: StringNullableFilter<"Phrase"> | string | null
    examplesJson?: JsonNullableFilter<"Phrase">
    difficulty?: IntFilter<"Phrase"> | number
    tags?: StringNullableListFilter<"Phrase">
    audioUrl?: StringNullableFilter<"Phrase"> | string | null
  }

  export type UserSetProgressUpsertWithWhereUniqueWithoutSetInput = {
    where: UserSetProgressWhereUniqueInput
    update: XOR<UserSetProgressUpdateWithoutSetInput, UserSetProgressUncheckedUpdateWithoutSetInput>
    create: XOR<UserSetProgressCreateWithoutSetInput, UserSetProgressUncheckedCreateWithoutSetInput>
  }

  export type UserSetProgressUpdateWithWhereUniqueWithoutSetInput = {
    where: UserSetProgressWhereUniqueInput
    data: XOR<UserSetProgressUpdateWithoutSetInput, UserSetProgressUncheckedUpdateWithoutSetInput>
  }

  export type UserSetProgressUpdateManyWithWhereWithoutSetInput = {
    where: UserSetProgressScalarWhereInput
    data: XOR<UserSetProgressUpdateManyMutationInput, UserSetProgressUncheckedUpdateManyWithoutSetInput>
  }

  export type PublishedSetUpsertWithoutFlashcardSetsInput = {
    update: XOR<PublishedSetUpdateWithoutFlashcardSetsInput, PublishedSetUncheckedUpdateWithoutFlashcardSetsInput>
    create: XOR<PublishedSetCreateWithoutFlashcardSetsInput, PublishedSetUncheckedCreateWithoutFlashcardSetsInput>
    where?: PublishedSetWhereInput
  }

  export type PublishedSetUpdateToOneWithWhereWithoutFlashcardSetsInput = {
    where?: PublishedSetWhereInput
    data: XOR<PublishedSetUpdateWithoutFlashcardSetsInput, PublishedSetUncheckedUpdateWithoutFlashcardSetsInput>
  }

  export type PublishedSetUpdateWithoutFlashcardSetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    cardCount?: IntFieldUpdateOperationsInput | number
    author?: StringFieldUpdateOperationsInput | string
    llmBrand?: NullableStringFieldUpdateOperationsInput | string | null
    llmModel?: NullableStringFieldUpdateOperationsInput | string | null
    seriousnessLevel?: NullableIntFieldUpdateOperationsInput | number | null
    proficiencyLevel?: NullableStringFieldUpdateOperationsInput | string | null
    specificTopics?: NullableStringFieldUpdateOperationsInput | string | null
    phrases?: JsonNullValueInput | InputJsonValue
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    downloads?: IntFieldUpdateOperationsInput | number
    tags?: PublishedSetUpdatetagsInput | string[]
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PublishedSetUncheckedUpdateWithoutFlashcardSetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    cardCount?: IntFieldUpdateOperationsInput | number
    author?: StringFieldUpdateOperationsInput | string
    llmBrand?: NullableStringFieldUpdateOperationsInput | string | null
    llmModel?: NullableStringFieldUpdateOperationsInput | string | null
    seriousnessLevel?: NullableIntFieldUpdateOperationsInput | number | null
    proficiencyLevel?: NullableStringFieldUpdateOperationsInput | string | null
    specificTopics?: NullableStringFieldUpdateOperationsInput | string | null
    phrases?: JsonNullValueInput | InputJsonValue
    rating?: FloatFieldUpdateOperationsInput | number
    ratingCount?: IntFieldUpdateOperationsInput | number
    downloads?: IntFieldUpdateOperationsInput | number
    tags?: PublishedSetUpdatetagsInput | string[]
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FlashcardSetCreateWithoutPhrasesInput = {
    id?: string
    name: string
    description?: string | null
    cleverTitle?: string | null
    level?: string | null
    goals?: FlashcardSetCreategoalsInput | string[]
    specificTopics?: string | null
    source: string
    imageUrl?: string | null
    seriousnessLevel?: number | null
    toneLevel?: number | null
    llmBrand?: string | null
    llmModel?: string | null
    promptTemplate?: string | null
    shareId?: string | null
    isPublished?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutFlashcardSetsInput
    progress?: UserSetProgressCreateNestedManyWithoutSetInput
    publishedSet?: PublishedSetCreateNestedOneWithoutFlashcardSetsInput
  }

  export type FlashcardSetUncheckedCreateWithoutPhrasesInput = {
    id?: string
    userId: string
    name: string
    description?: string | null
    cleverTitle?: string | null
    level?: string | null
    goals?: FlashcardSetCreategoalsInput | string[]
    specificTopics?: string | null
    source: string
    imageUrl?: string | null
    seriousnessLevel?: number | null
    toneLevel?: number | null
    llmBrand?: string | null
    llmModel?: string | null
    promptTemplate?: string | null
    shareId?: string | null
    isPublished?: boolean
    publishedSetId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    progress?: UserSetProgressUncheckedCreateNestedManyWithoutSetInput
  }

  export type FlashcardSetCreateOrConnectWithoutPhrasesInput = {
    where: FlashcardSetWhereUniqueInput
    create: XOR<FlashcardSetCreateWithoutPhrasesInput, FlashcardSetUncheckedCreateWithoutPhrasesInput>
  }

  export type FlashcardSetUpsertWithoutPhrasesInput = {
    update: XOR<FlashcardSetUpdateWithoutPhrasesInput, FlashcardSetUncheckedUpdateWithoutPhrasesInput>
    create: XOR<FlashcardSetCreateWithoutPhrasesInput, FlashcardSetUncheckedCreateWithoutPhrasesInput>
    where?: FlashcardSetWhereInput
  }

  export type FlashcardSetUpdateToOneWithWhereWithoutPhrasesInput = {
    where?: FlashcardSetWhereInput
    data: XOR<FlashcardSetUpdateWithoutPhrasesInput, FlashcardSetUncheckedUpdateWithoutPhrasesInput>
  }

  export type FlashcardSetUpdateWithoutPhrasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cleverTitle?: NullableStringFieldUpdateOperationsInput | string | null
    level?: NullableStringFieldUpdateOperationsInput | string | null
    goals?: FlashcardSetUpdategoalsInput | string[]
    specificTopics?: NullableStringFieldUpdateOperationsInput | string | null
    source?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    seriousnessLevel?: NullableIntFieldUpdateOperationsInput | number | null
    toneLevel?: NullableIntFieldUpdateOperationsInput | number | null
    llmBrand?: NullableStringFieldUpdateOperationsInput | string | null
    llmModel?: NullableStringFieldUpdateOperationsInput | string | null
    promptTemplate?: NullableStringFieldUpdateOperationsInput | string | null
    shareId?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFlashcardSetsNestedInput
    progress?: UserSetProgressUpdateManyWithoutSetNestedInput
    publishedSet?: PublishedSetUpdateOneWithoutFlashcardSetsNestedInput
  }

  export type FlashcardSetUncheckedUpdateWithoutPhrasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cleverTitle?: NullableStringFieldUpdateOperationsInput | string | null
    level?: NullableStringFieldUpdateOperationsInput | string | null
    goals?: FlashcardSetUpdategoalsInput | string[]
    specificTopics?: NullableStringFieldUpdateOperationsInput | string | null
    source?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    seriousnessLevel?: NullableIntFieldUpdateOperationsInput | number | null
    toneLevel?: NullableIntFieldUpdateOperationsInput | number | null
    llmBrand?: NullableStringFieldUpdateOperationsInput | string | null
    llmModel?: NullableStringFieldUpdateOperationsInput | string | null
    promptTemplate?: NullableStringFieldUpdateOperationsInput | string | null
    shareId?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    publishedSetId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: UserSetProgressUncheckedUpdateManyWithoutSetNestedInput
  }

  export type UserCreateWithoutProgressInput = {
    id: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    defaultLanguage?: string
    preferredVoice?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    flashcardSets?: FlashcardSetCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProgressInput = {
    id: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    defaultLanguage?: string
    preferredVoice?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    flashcardSets?: FlashcardSetUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProgressInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProgressInput, UserUncheckedCreateWithoutProgressInput>
  }

  export type FlashcardSetCreateWithoutProgressInput = {
    id?: string
    name: string
    description?: string | null
    cleverTitle?: string | null
    level?: string | null
    goals?: FlashcardSetCreategoalsInput | string[]
    specificTopics?: string | null
    source: string
    imageUrl?: string | null
    seriousnessLevel?: number | null
    toneLevel?: number | null
    llmBrand?: string | null
    llmModel?: string | null
    promptTemplate?: string | null
    shareId?: string | null
    isPublished?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutFlashcardSetsInput
    phrases?: PhraseCreateNestedManyWithoutFlashcardSetInput
    publishedSet?: PublishedSetCreateNestedOneWithoutFlashcardSetsInput
  }

  export type FlashcardSetUncheckedCreateWithoutProgressInput = {
    id?: string
    userId: string
    name: string
    description?: string | null
    cleverTitle?: string | null
    level?: string | null
    goals?: FlashcardSetCreategoalsInput | string[]
    specificTopics?: string | null
    source: string
    imageUrl?: string | null
    seriousnessLevel?: number | null
    toneLevel?: number | null
    llmBrand?: string | null
    llmModel?: string | null
    promptTemplate?: string | null
    shareId?: string | null
    isPublished?: boolean
    publishedSetId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    phrases?: PhraseUncheckedCreateNestedManyWithoutFlashcardSetInput
  }

  export type FlashcardSetCreateOrConnectWithoutProgressInput = {
    where: FlashcardSetWhereUniqueInput
    create: XOR<FlashcardSetCreateWithoutProgressInput, FlashcardSetUncheckedCreateWithoutProgressInput>
  }

  export type UserUpsertWithoutProgressInput = {
    update: XOR<UserUpdateWithoutProgressInput, UserUncheckedUpdateWithoutProgressInput>
    create: XOR<UserCreateWithoutProgressInput, UserUncheckedCreateWithoutProgressInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProgressInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProgressInput, UserUncheckedUpdateWithoutProgressInput>
  }

  export type UserUpdateWithoutProgressInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    defaultLanguage?: StringFieldUpdateOperationsInput | string
    preferredVoice?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    flashcardSets?: FlashcardSetUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProgressInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    defaultLanguage?: StringFieldUpdateOperationsInput | string
    preferredVoice?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    flashcardSets?: FlashcardSetUncheckedUpdateManyWithoutUserNestedInput
  }

  export type FlashcardSetUpsertWithoutProgressInput = {
    update: XOR<FlashcardSetUpdateWithoutProgressInput, FlashcardSetUncheckedUpdateWithoutProgressInput>
    create: XOR<FlashcardSetCreateWithoutProgressInput, FlashcardSetUncheckedCreateWithoutProgressInput>
    where?: FlashcardSetWhereInput
  }

  export type FlashcardSetUpdateToOneWithWhereWithoutProgressInput = {
    where?: FlashcardSetWhereInput
    data: XOR<FlashcardSetUpdateWithoutProgressInput, FlashcardSetUncheckedUpdateWithoutProgressInput>
  }

  export type FlashcardSetUpdateWithoutProgressInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cleverTitle?: NullableStringFieldUpdateOperationsInput | string | null
    level?: NullableStringFieldUpdateOperationsInput | string | null
    goals?: FlashcardSetUpdategoalsInput | string[]
    specificTopics?: NullableStringFieldUpdateOperationsInput | string | null
    source?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    seriousnessLevel?: NullableIntFieldUpdateOperationsInput | number | null
    toneLevel?: NullableIntFieldUpdateOperationsInput | number | null
    llmBrand?: NullableStringFieldUpdateOperationsInput | string | null
    llmModel?: NullableStringFieldUpdateOperationsInput | string | null
    promptTemplate?: NullableStringFieldUpdateOperationsInput | string | null
    shareId?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFlashcardSetsNestedInput
    phrases?: PhraseUpdateManyWithoutFlashcardSetNestedInput
    publishedSet?: PublishedSetUpdateOneWithoutFlashcardSetsNestedInput
  }

  export type FlashcardSetUncheckedUpdateWithoutProgressInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cleverTitle?: NullableStringFieldUpdateOperationsInput | string | null
    level?: NullableStringFieldUpdateOperationsInput | string | null
    goals?: FlashcardSetUpdategoalsInput | string[]
    specificTopics?: NullableStringFieldUpdateOperationsInput | string | null
    source?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    seriousnessLevel?: NullableIntFieldUpdateOperationsInput | number | null
    toneLevel?: NullableIntFieldUpdateOperationsInput | number | null
    llmBrand?: NullableStringFieldUpdateOperationsInput | string | null
    llmModel?: NullableStringFieldUpdateOperationsInput | string | null
    promptTemplate?: NullableStringFieldUpdateOperationsInput | string | null
    shareId?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    publishedSetId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phrases?: PhraseUncheckedUpdateManyWithoutFlashcardSetNestedInput
  }

  export type FlashcardSetCreateWithoutPublishedSetInput = {
    id?: string
    name: string
    description?: string | null
    cleverTitle?: string | null
    level?: string | null
    goals?: FlashcardSetCreategoalsInput | string[]
    specificTopics?: string | null
    source: string
    imageUrl?: string | null
    seriousnessLevel?: number | null
    toneLevel?: number | null
    llmBrand?: string | null
    llmModel?: string | null
    promptTemplate?: string | null
    shareId?: string | null
    isPublished?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutFlashcardSetsInput
    phrases?: PhraseCreateNestedManyWithoutFlashcardSetInput
    progress?: UserSetProgressCreateNestedManyWithoutSetInput
  }

  export type FlashcardSetUncheckedCreateWithoutPublishedSetInput = {
    id?: string
    userId: string
    name: string
    description?: string | null
    cleverTitle?: string | null
    level?: string | null
    goals?: FlashcardSetCreategoalsInput | string[]
    specificTopics?: string | null
    source: string
    imageUrl?: string | null
    seriousnessLevel?: number | null
    toneLevel?: number | null
    llmBrand?: string | null
    llmModel?: string | null
    promptTemplate?: string | null
    shareId?: string | null
    isPublished?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    phrases?: PhraseUncheckedCreateNestedManyWithoutFlashcardSetInput
    progress?: UserSetProgressUncheckedCreateNestedManyWithoutSetInput
  }

  export type FlashcardSetCreateOrConnectWithoutPublishedSetInput = {
    where: FlashcardSetWhereUniqueInput
    create: XOR<FlashcardSetCreateWithoutPublishedSetInput, FlashcardSetUncheckedCreateWithoutPublishedSetInput>
  }

  export type FlashcardSetCreateManyPublishedSetInputEnvelope = {
    data: FlashcardSetCreateManyPublishedSetInput | FlashcardSetCreateManyPublishedSetInput[]
    skipDuplicates?: boolean
  }

  export type FlashcardSetUpsertWithWhereUniqueWithoutPublishedSetInput = {
    where: FlashcardSetWhereUniqueInput
    update: XOR<FlashcardSetUpdateWithoutPublishedSetInput, FlashcardSetUncheckedUpdateWithoutPublishedSetInput>
    create: XOR<FlashcardSetCreateWithoutPublishedSetInput, FlashcardSetUncheckedCreateWithoutPublishedSetInput>
  }

  export type FlashcardSetUpdateWithWhereUniqueWithoutPublishedSetInput = {
    where: FlashcardSetWhereUniqueInput
    data: XOR<FlashcardSetUpdateWithoutPublishedSetInput, FlashcardSetUncheckedUpdateWithoutPublishedSetInput>
  }

  export type FlashcardSetUpdateManyWithWhereWithoutPublishedSetInput = {
    where: FlashcardSetScalarWhereInput
    data: XOR<FlashcardSetUpdateManyMutationInput, FlashcardSetUncheckedUpdateManyWithoutPublishedSetInput>
  }

  export type FlashcardSetCreateManyUserInput = {
    id?: string
    name: string
    description?: string | null
    cleverTitle?: string | null
    level?: string | null
    goals?: FlashcardSetCreategoalsInput | string[]
    specificTopics?: string | null
    source: string
    imageUrl?: string | null
    seriousnessLevel?: number | null
    toneLevel?: number | null
    llmBrand?: string | null
    llmModel?: string | null
    promptTemplate?: string | null
    shareId?: string | null
    isPublished?: boolean
    publishedSetId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserSetProgressCreateManyUserInput = {
    id?: string
    setId: string
    progressData: JsonNullValueInput | InputJsonValue
    lastAccessedAt?: Date | string
    streak?: number
    bestStreak?: number
    totalReviews?: number
  }

  export type FlashcardSetUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cleverTitle?: NullableStringFieldUpdateOperationsInput | string | null
    level?: NullableStringFieldUpdateOperationsInput | string | null
    goals?: FlashcardSetUpdategoalsInput | string[]
    specificTopics?: NullableStringFieldUpdateOperationsInput | string | null
    source?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    seriousnessLevel?: NullableIntFieldUpdateOperationsInput | number | null
    toneLevel?: NullableIntFieldUpdateOperationsInput | number | null
    llmBrand?: NullableStringFieldUpdateOperationsInput | string | null
    llmModel?: NullableStringFieldUpdateOperationsInput | string | null
    promptTemplate?: NullableStringFieldUpdateOperationsInput | string | null
    shareId?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phrases?: PhraseUpdateManyWithoutFlashcardSetNestedInput
    progress?: UserSetProgressUpdateManyWithoutSetNestedInput
    publishedSet?: PublishedSetUpdateOneWithoutFlashcardSetsNestedInput
  }

  export type FlashcardSetUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cleverTitle?: NullableStringFieldUpdateOperationsInput | string | null
    level?: NullableStringFieldUpdateOperationsInput | string | null
    goals?: FlashcardSetUpdategoalsInput | string[]
    specificTopics?: NullableStringFieldUpdateOperationsInput | string | null
    source?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    seriousnessLevel?: NullableIntFieldUpdateOperationsInput | number | null
    toneLevel?: NullableIntFieldUpdateOperationsInput | number | null
    llmBrand?: NullableStringFieldUpdateOperationsInput | string | null
    llmModel?: NullableStringFieldUpdateOperationsInput | string | null
    promptTemplate?: NullableStringFieldUpdateOperationsInput | string | null
    shareId?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    publishedSetId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phrases?: PhraseUncheckedUpdateManyWithoutFlashcardSetNestedInput
    progress?: UserSetProgressUncheckedUpdateManyWithoutSetNestedInput
  }

  export type FlashcardSetUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cleverTitle?: NullableStringFieldUpdateOperationsInput | string | null
    level?: NullableStringFieldUpdateOperationsInput | string | null
    goals?: FlashcardSetUpdategoalsInput | string[]
    specificTopics?: NullableStringFieldUpdateOperationsInput | string | null
    source?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    seriousnessLevel?: NullableIntFieldUpdateOperationsInput | number | null
    toneLevel?: NullableIntFieldUpdateOperationsInput | number | null
    llmBrand?: NullableStringFieldUpdateOperationsInput | string | null
    llmModel?: NullableStringFieldUpdateOperationsInput | string | null
    promptTemplate?: NullableStringFieldUpdateOperationsInput | string | null
    shareId?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    publishedSetId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSetProgressUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    progressData?: JsonNullValueInput | InputJsonValue
    lastAccessedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    streak?: IntFieldUpdateOperationsInput | number
    bestStreak?: IntFieldUpdateOperationsInput | number
    totalReviews?: IntFieldUpdateOperationsInput | number
    set?: FlashcardSetUpdateOneRequiredWithoutProgressNestedInput
  }

  export type UserSetProgressUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    setId?: StringFieldUpdateOperationsInput | string
    progressData?: JsonNullValueInput | InputJsonValue
    lastAccessedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    streak?: IntFieldUpdateOperationsInput | number
    bestStreak?: IntFieldUpdateOperationsInput | number
    totalReviews?: IntFieldUpdateOperationsInput | number
  }

  export type UserSetProgressUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    setId?: StringFieldUpdateOperationsInput | string
    progressData?: JsonNullValueInput | InputJsonValue
    lastAccessedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    streak?: IntFieldUpdateOperationsInput | number
    bestStreak?: IntFieldUpdateOperationsInput | number
    totalReviews?: IntFieldUpdateOperationsInput | number
  }

  export type PhraseCreateManyFlashcardSetInput = {
    id?: string
    english: string
    thai: string
    thaiMasculine: string
    thaiFeminine: string
    pronunciation: string
    mnemonic?: string | null
    examplesJson?: NullableJsonNullValueInput | InputJsonValue
    difficulty?: number
    tags?: PhraseCreatetagsInput | string[]
    audioUrl?: string | null
  }

  export type UserSetProgressCreateManySetInput = {
    id?: string
    userId: string
    progressData: JsonNullValueInput | InputJsonValue
    lastAccessedAt?: Date | string
    streak?: number
    bestStreak?: number
    totalReviews?: number
  }

  export type PhraseUpdateWithoutFlashcardSetInput = {
    id?: StringFieldUpdateOperationsInput | string
    english?: StringFieldUpdateOperationsInput | string
    thai?: StringFieldUpdateOperationsInput | string
    thaiMasculine?: StringFieldUpdateOperationsInput | string
    thaiFeminine?: StringFieldUpdateOperationsInput | string
    pronunciation?: StringFieldUpdateOperationsInput | string
    mnemonic?: NullableStringFieldUpdateOperationsInput | string | null
    examplesJson?: NullableJsonNullValueInput | InputJsonValue
    difficulty?: IntFieldUpdateOperationsInput | number
    tags?: PhraseUpdatetagsInput | string[]
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PhraseUncheckedUpdateWithoutFlashcardSetInput = {
    id?: StringFieldUpdateOperationsInput | string
    english?: StringFieldUpdateOperationsInput | string
    thai?: StringFieldUpdateOperationsInput | string
    thaiMasculine?: StringFieldUpdateOperationsInput | string
    thaiFeminine?: StringFieldUpdateOperationsInput | string
    pronunciation?: StringFieldUpdateOperationsInput | string
    mnemonic?: NullableStringFieldUpdateOperationsInput | string | null
    examplesJson?: NullableJsonNullValueInput | InputJsonValue
    difficulty?: IntFieldUpdateOperationsInput | number
    tags?: PhraseUpdatetagsInput | string[]
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PhraseUncheckedUpdateManyWithoutFlashcardSetInput = {
    id?: StringFieldUpdateOperationsInput | string
    english?: StringFieldUpdateOperationsInput | string
    thai?: StringFieldUpdateOperationsInput | string
    thaiMasculine?: StringFieldUpdateOperationsInput | string
    thaiFeminine?: StringFieldUpdateOperationsInput | string
    pronunciation?: StringFieldUpdateOperationsInput | string
    mnemonic?: NullableStringFieldUpdateOperationsInput | string | null
    examplesJson?: NullableJsonNullValueInput | InputJsonValue
    difficulty?: IntFieldUpdateOperationsInput | number
    tags?: PhraseUpdatetagsInput | string[]
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserSetProgressUpdateWithoutSetInput = {
    id?: StringFieldUpdateOperationsInput | string
    progressData?: JsonNullValueInput | InputJsonValue
    lastAccessedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    streak?: IntFieldUpdateOperationsInput | number
    bestStreak?: IntFieldUpdateOperationsInput | number
    totalReviews?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutProgressNestedInput
  }

  export type UserSetProgressUncheckedUpdateWithoutSetInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    progressData?: JsonNullValueInput | InputJsonValue
    lastAccessedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    streak?: IntFieldUpdateOperationsInput | number
    bestStreak?: IntFieldUpdateOperationsInput | number
    totalReviews?: IntFieldUpdateOperationsInput | number
  }

  export type UserSetProgressUncheckedUpdateManyWithoutSetInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    progressData?: JsonNullValueInput | InputJsonValue
    lastAccessedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    streak?: IntFieldUpdateOperationsInput | number
    bestStreak?: IntFieldUpdateOperationsInput | number
    totalReviews?: IntFieldUpdateOperationsInput | number
  }

  export type FlashcardSetCreateManyPublishedSetInput = {
    id?: string
    userId: string
    name: string
    description?: string | null
    cleverTitle?: string | null
    level?: string | null
    goals?: FlashcardSetCreategoalsInput | string[]
    specificTopics?: string | null
    source: string
    imageUrl?: string | null
    seriousnessLevel?: number | null
    toneLevel?: number | null
    llmBrand?: string | null
    llmModel?: string | null
    promptTemplate?: string | null
    shareId?: string | null
    isPublished?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FlashcardSetUpdateWithoutPublishedSetInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cleverTitle?: NullableStringFieldUpdateOperationsInput | string | null
    level?: NullableStringFieldUpdateOperationsInput | string | null
    goals?: FlashcardSetUpdategoalsInput | string[]
    specificTopics?: NullableStringFieldUpdateOperationsInput | string | null
    source?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    seriousnessLevel?: NullableIntFieldUpdateOperationsInput | number | null
    toneLevel?: NullableIntFieldUpdateOperationsInput | number | null
    llmBrand?: NullableStringFieldUpdateOperationsInput | string | null
    llmModel?: NullableStringFieldUpdateOperationsInput | string | null
    promptTemplate?: NullableStringFieldUpdateOperationsInput | string | null
    shareId?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFlashcardSetsNestedInput
    phrases?: PhraseUpdateManyWithoutFlashcardSetNestedInput
    progress?: UserSetProgressUpdateManyWithoutSetNestedInput
  }

  export type FlashcardSetUncheckedUpdateWithoutPublishedSetInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cleverTitle?: NullableStringFieldUpdateOperationsInput | string | null
    level?: NullableStringFieldUpdateOperationsInput | string | null
    goals?: FlashcardSetUpdategoalsInput | string[]
    specificTopics?: NullableStringFieldUpdateOperationsInput | string | null
    source?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    seriousnessLevel?: NullableIntFieldUpdateOperationsInput | number | null
    toneLevel?: NullableIntFieldUpdateOperationsInput | number | null
    llmBrand?: NullableStringFieldUpdateOperationsInput | string | null
    llmModel?: NullableStringFieldUpdateOperationsInput | string | null
    promptTemplate?: NullableStringFieldUpdateOperationsInput | string | null
    shareId?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phrases?: PhraseUncheckedUpdateManyWithoutFlashcardSetNestedInput
    progress?: UserSetProgressUncheckedUpdateManyWithoutSetNestedInput
  }

  export type FlashcardSetUncheckedUpdateManyWithoutPublishedSetInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cleverTitle?: NullableStringFieldUpdateOperationsInput | string | null
    level?: NullableStringFieldUpdateOperationsInput | string | null
    goals?: FlashcardSetUpdategoalsInput | string[]
    specificTopics?: NullableStringFieldUpdateOperationsInput | string | null
    source?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    seriousnessLevel?: NullableIntFieldUpdateOperationsInput | number | null
    toneLevel?: NullableIntFieldUpdateOperationsInput | number | null
    llmBrand?: NullableStringFieldUpdateOperationsInput | string | null
    llmModel?: NullableStringFieldUpdateOperationsInput | string | null
    promptTemplate?: NullableStringFieldUpdateOperationsInput | string | null
    shareId?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}