// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // Connection pooled URL for queries
  directUrl = env("DIRECT_DATABASE_URL") // Direct connection URL for migrations
}

model User {
  id            String    @id // Use Clerk ID as primary key
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  // Application-specific relations
  flashcardSets   FlashcardSet[]
  userSetProgress UserSetProgress[]
  userMnemonics   UserMnemonic[]
  folders         Folder[]
}

model FlashcardSet {
  id             String   @id @default(cuid())
  userId         String   // Foreign key referencing User.id (Clerk User ID)
  name           String   
  cleverTitle    String?  
  level          String?  
  goals          String[] 
  specificTopics String?
  source         String   
  imageUrl       String?  
  seriousnessLevel Int?   
  toneLevel      Int?    
  llmBrand       String?  
  llmModel       String?  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  shareId        String?  @unique 
  folderId       String?  // Optional folder assignment

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  phrases Phrase[] 
  progress UserSetProgress[]
  folder   Folder?  @relation(fields: [folderId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([folderId])
}

model Phrase {
  id              String   @id @default(cuid())
  setId           String   // Foreign key to FlashcardSet
  english         String
  thai            String
  thaiMasculine   String
  thaiFeminine    String
  pronunciation   String
  mnemonic        String?
  examplesJson    Json?    @db.JsonB // Store examples array as JSON

  flashcardSet FlashcardSet @relation(fields: [setId], references: [id], onDelete: Cascade)

  @@index([setId])
}

model UserSetProgress {
  id             String   @id @default(cuid())
  userId         String   // Foreign key referencing User.id (Clerk User ID)
  setId          String   
  progressData   Json     @db.JsonB 
  lastAccessedAt DateTime @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  set  FlashcardSet @relation(fields: [setId], references: [id], onDelete: Cascade)

  @@unique([userId, setId]) 
  @@index([userId])
  @@index([setId])
}

model PublishedSet {
  id             String   @id @default(cuid())
  title          String   // Use title for public display
  description    String?
  imageUrl       String?
  cardCount      Int
  author         String   // Store author name (e.g., user's name or "Anonymous")
  llmBrand       String?
  llmModel       String?
  seriousnessLevel Int?
  proficiencyLevel String?
  specificTopics String?
  phrases        Json     @db.JsonB // Store the Phrase[] array directly as JSONB
  publishedAt    DateTime @default(now())

  @@index([publishedAt])
}

model UserMnemonic {
  id          String   @id @default(cuid())
  userId      String   // Foreign key referencing User.id (Clerk User ID)
  setId       String   // Can be a default set ID or a custom set ID
  phraseIndex Int      // Index of the phrase in the set
  mnemonic    String   // The custom mnemonic
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, setId, phraseIndex])
  @@index([userId])
  @@index([setId])
}

model Folder {
  id          String   @id @default(cuid())
  userId      String   // Foreign key referencing User.id (Clerk User ID)
  name        String
  description String?
  isDefault   Boolean  @default(false) // For system-created folders
  orderIndex  Int      @default(0)     // For custom ordering
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  sets FlashcardSet[]

  @@unique([userId, name]) // Prevent duplicate folder names per user
  @@index([userId])
}
